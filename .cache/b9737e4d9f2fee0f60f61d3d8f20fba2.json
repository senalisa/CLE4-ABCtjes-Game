{"dependencies":[{"name":"@pixi/display","loc":{"line":8,"column":26}},{"name":"@pixi/core","loc":{"line":9,"column":35}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Application = undefined;\n\nvar _display = require(\"@pixi/display\");\n\nvar _core = require(\"@pixi/core\");\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\n/*!\n * @pixi/app - v6.3.2\n * Compiled Wed, 04 May 2022 17:49:13 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nvar Application = /** @class */function () {\n  /**\n   * @param {object} [options] - The optional renderer parameters.\n   * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n   *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n   *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n   * @param {number} [options.width=800] - The width of the renderers view.\n   * @param {number} [options.height=600] - The height of the renderers view.\n   * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n   * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n   *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n   *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n   * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n   *   resolutions other than 1.\n   * @param {boolean} [options.antialias=false] - Sets antialias\n   * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n   *  need to call toDataUrl on the WebGL context.\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n   * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n   *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n   *   it is ignored.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *   not before the new render pass.\n   * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n   *  for devices with dual graphics card. **(WebGL only)**.\n   * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n   *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n   *  The system ticker will always run before both the shared ticker and the app ticker.\n   * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n   * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n   */\n  function Application(options) {\n    var _this = this;\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    this.stage = new _display.Container();\n    // The default options\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    this.renderer = (0, _core.autoDetectRenderer)(options);\n    // install plugins here\n    Application._plugins.forEach(function (plugin) {\n      plugin.init.call(_this, options);\n    });\n  }\n  /**\n   * Register a middleware plugin for the application\n   * @static\n   * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n   */\n  Application.registerPlugin = function (plugin) {\n    Application._plugins.push(plugin);\n  };\n  /**\n   * Render the current stage.\n   */\n  Application.prototype.render = function () {\n    this.renderer.render(this.stage);\n  };\n  Object.defineProperty(Application.prototype, \"view\", {\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get: function () {\n      return this.renderer.view;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Application.prototype, \"screen\", {\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get: function () {\n      return this.renderer.screen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Destroy and don't use after this.\n   * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n   * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'stageOptions' will be passed on to those calls.\n   * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the texture of the child sprite\n   * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the base texture of the child sprite\n   */\n  Application.prototype.destroy = function (removeView, stageOptions) {\n    var _this = this;\n    // Destroy plugins in the opposite order\n    // which they were constructed\n    var plugins = Application._plugins.slice(0);\n    plugins.reverse();\n    plugins.forEach(function (plugin) {\n      plugin.destroy.call(_this);\n    });\n    this.stage.destroy(stageOptions);\n    this.stage = null;\n    this.renderer.destroy(removeView);\n    this.renderer = null;\n  };\n  /** Collection of installed plugins. */\n  Application._plugins = [];\n  return Application;\n}();\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nvar ResizePlugin = /** @class */function () {\n  function ResizePlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  ResizePlugin.init = function (options) {\n    var _this = this;\n    Object.defineProperty(this, 'resizeTo',\n    /**\n     * The HTML element or window to automatically resize the\n     * renderer's view element to match width and height.\n     * @member {Window|HTMLElement}\n     * @name resizeTo\n     * @memberof PIXI.Application#\n     */\n    {\n      set: function (dom) {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._resizeTo = dom;\n        if (dom) {\n          globalThis.addEventListener('resize', this.queueResize);\n          this.resize();\n        }\n      },\n      get: function () {\n        return this._resizeTo;\n      }\n    });\n    /**\n     * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n     * only be called once.\n     *\n     * @memberof PIXI.Application#\n     * @method queueResize\n     * @private\n     */\n    this.queueResize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      _this.cancelResize();\n      // // Throttle resize events per raf\n      _this._resizeId = requestAnimationFrame(function () {\n        return _this.resize();\n      });\n    };\n    /**\n     * Cancel the resize queue.\n     *\n     * @memberof PIXI.Application#\n     * @method cancelResize\n     * @private\n     */\n    this.cancelResize = function () {\n      if (_this._resizeId) {\n        cancelAnimationFrame(_this._resizeId);\n        _this._resizeId = null;\n      }\n    };\n    /**\n     * Execute an immediate resize on the renderer, this is not\n     * throttled and can be expensive to call many times in a row.\n     * Will resize only if `resizeTo` property is set.\n     *\n     * @memberof PIXI.Application#\n     * @method resize\n     */\n    this.resize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n      // clear queue resize\n      _this.cancelResize();\n      var width;\n      var height;\n      // Resize to the window\n      if (_this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      }\n      // Resize to other HTML entities\n      else {\n          var _a = _this._resizeTo,\n              clientWidth = _a.clientWidth,\n              clientHeight = _a.clientHeight;\n          width = clientWidth;\n          height = clientHeight;\n        }\n      _this.renderer.resize(width, height);\n    };\n    // On resize\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  };\n  /**\n   * Clean up the ticker, scoped to application\n   *\n   * @static\n   * @private\n   */\n  ResizePlugin.destroy = function () {\n    globalThis.removeEventListener('resize', this.queueResize);\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  };\n  return ResizePlugin;\n}();\n\nApplication.registerPlugin(ResizePlugin);\n\nexports.Application = Application;\n//# sourceMappingURL=app.js.map"},"hash":"f106f317ab5aadad87cf96b42f0bd409"}