{"dependencies":[{"name":"@pixi/core","loc":{"line":8,"column":72}},{"name":"@pixi/math","loc":{"line":9,"column":39}},{"name":"@pixi/constants","loc":{"line":10,"column":34}},{"name":"@pixi/display","loc":{"line":11,"column":26}},{"name":"@pixi/settings","loc":{"line":12,"column":25}},{"name":"@pixi/utils","loc":{"line":13,"column":38}}],"generated":{"js":"\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeshMaterial = exports.MeshGeometry = exports.MeshBatchUvs = exports.Mesh = undefined;\n\nvar _core = require(\"@pixi/core\");\n\nvar _math = require(\"@pixi/math\");\n\nvar _constants = require(\"@pixi/constants\");\n\nvar _display = require(\"@pixi/display\");\n\nvar _settings = require(\"@pixi/settings\");\n\nvar _utils = require(\"@pixi/utils\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\n/*!\n * @pixi/mesh - v6.3.2\n * Compiled Wed, 04 May 2022 17:49:13 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @memberof PIXI\n */\nvar MeshBatchUvs = /** @class */function () {\n  /**\n   * @param uvBuffer - Buffer with normalized uv's\n   * @param uvMatrix - Material UV matrix\n   */\n  function MeshBatchUvs(uvBuffer, uvMatrix) {\n    this.uvBuffer = uvBuffer;\n    this.uvMatrix = uvMatrix;\n    this.data = null;\n    this._bufferUpdateId = -1;\n    this._textureUpdateId = -1;\n    this._updateID = 0;\n  }\n  /**\n   * Updates\n   *\n   * @param forceUpdate - force the update\n   */\n  MeshBatchUvs.prototype.update = function (forceUpdate) {\n    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {\n      return;\n    }\n    this._bufferUpdateId = this.uvBuffer._updateID;\n    this._textureUpdateId = this.uvMatrix._updateID;\n    var data = this.uvBuffer.data;\n    if (!this.data || this.data.length !== data.length) {\n      this.data = new Float32Array(data.length);\n    }\n    this.uvMatrix.multiplyUvs(data, this.data);\n    this._updateID++;\n  };\n  return MeshBatchUvs;\n}();\n\nvar tempPoint = new _math.Point();\nvar tempPolygon = new _math.Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @memberof PIXI\n */\nvar Mesh = /** @class */function (_super) {\n  __extends(Mesh, _super);\n  /**\n   * @param geometry - The geometry the mesh will use.\n   * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n   * @param state - The state that the WebGL context is required to be in to render the mesh\n   *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n   * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n   */\n  function Mesh(geometry, shader, state, drawMode) {\n    if (drawMode === void 0) {\n      drawMode = _constants.DRAW_MODES.TRIANGLES;\n    }\n    var _this = _super.call(this) || this;\n    _this.geometry = geometry;\n    _this.shader = shader;\n    _this.state = state || _core.State.for2d();\n    _this.drawMode = drawMode;\n    _this.start = 0;\n    _this.size = 0;\n    _this.uvs = null;\n    _this.indices = null;\n    _this.vertexData = new Float32Array(1);\n    _this.vertexDirty = -1;\n    _this._transformID = -1;\n    _this._roundPixels = _settings.settings.ROUND_PIXELS;\n    _this.batchUvs = null;\n    return _this;\n  }\n  Object.defineProperty(Mesh.prototype, \"geometry\", {\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get: function () {\n      return this._geometry;\n    },\n    set: function (value) {\n      if (this._geometry === value) {\n        return;\n      }\n      if (this._geometry) {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0) {\n          this._geometry.dispose();\n        }\n      }\n      this._geometry = value;\n      if (this._geometry) {\n        this._geometry.refCount++;\n      }\n      this.vertexDirty = -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this.geometry.buffers[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"material\", {\n    get: function () {\n      return this.shader;\n    },\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set: function (value) {\n      this.shader = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"blendMode\", {\n    get: function () {\n      return this.state.blendMode;\n    },\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set: function (value) {\n      this.state.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n    get: function () {\n      return this._roundPixels;\n    },\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default false\n     */\n    set: function (value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n      this._roundPixels = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"tint\", {\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     *\n     * @default 0xFFFFFF\n     */\n    get: function () {\n      return 'tint' in this.shader ? this.shader.tint : null;\n    },\n    set: function (value) {\n      this.shader.tint = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"texture\", {\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     */\n    get: function () {\n      return 'texture' in this.shader ? this.shader.texture : null;\n    },\n    set: function (value) {\n      this.shader.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Standard renderer draw.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._render = function (renderer) {\n    // set properties for batching..\n    // TODO could use a different way to grab verts?\n    var vertices = this.geometry.buffers[0].data;\n    var shader = this.shader;\n    // TODO benchmark check for attribute size..\n    if (shader.batchable && this.drawMode === _constants.DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n      this._renderToBatch(renderer);\n    } else {\n      this._renderDefault(renderer);\n    }\n  };\n  /**\n   * Standard non-batching way of rendering.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderDefault = function (renderer) {\n    var shader = this.shader;\n    shader.alpha = this.worldAlpha;\n    if (shader.update) {\n      shader.update();\n    }\n    renderer.batch.flush();\n    // bind and sync uniforms..\n    shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n    renderer.shader.bind(shader);\n    // set state..\n    renderer.state.set(this.state);\n    // bind the geometry...\n    renderer.geometry.bind(this.geometry, shader);\n    // then render it\n    renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n  };\n  /**\n   * Rendering by using the Batch system.\n   *\n   * @param renderer - Instance to renderer.\n   */\n  Mesh.prototype._renderToBatch = function (renderer) {\n    var geometry = this.geometry;\n    var shader = this.shader;\n    if (shader.uvMatrix) {\n      shader.uvMatrix.update();\n      this.calculateUvs();\n    }\n    // set properties for batching..\n    this.calculateVertices();\n    this.indices = geometry.indexBuffer.data;\n    this._tintRGB = shader._tintRGB;\n    this._texture = shader.texture;\n    var pluginName = this.material.pluginName;\n    renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n    renderer.plugins[pluginName].render(this);\n  };\n  /** Updates vertexData field based on transform and vertices. */\n  Mesh.prototype.calculateVertices = function () {\n    var geometry = this.geometry;\n    var verticesBuffer = geometry.buffers[0];\n    var vertices = verticesBuffer.data;\n    var vertexDirtyId = verticesBuffer._updateID;\n    if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n      return;\n    }\n    this._transformID = this.transform._worldID;\n    if (this.vertexData.length !== vertices.length) {\n      this.vertexData = new Float32Array(vertices.length);\n    }\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    for (var i = 0; i < vertexData.length / 2; i++) {\n      var x = vertices[i * 2];\n      var y = vertices[i * 2 + 1];\n      vertexData[i * 2] = a * x + c * y + tx;\n      vertexData[i * 2 + 1] = b * x + d * y + ty;\n    }\n    if (this._roundPixels) {\n      var resolution = _settings.settings.RESOLUTION;\n      for (var i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n      }\n    }\n    this.vertexDirty = vertexDirtyId;\n  };\n  /** Updates uv field based on from geometry uv's or batchUvs. */\n  Mesh.prototype.calculateUvs = function () {\n    var geomUvs = this.geometry.buffers[1];\n    var shader = this.shader;\n    if (!shader.uvMatrix.isSimple) {\n      if (!this.batchUvs) {\n        this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n      }\n      this.batchUvs.update();\n      this.uvs = this.batchUvs.data;\n    } else {\n      this.uvs = geomUvs.data;\n    }\n  };\n  /**\n   * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n   * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n   */\n  Mesh.prototype._calculateBounds = function () {\n    this.calculateVertices();\n    this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n  };\n  /**\n   * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n   *\n   * @param point - The point to test.\n   * @return - The result of the test.\n   */\n  Mesh.prototype.containsPoint = function (point) {\n    if (!this.getBounds().contains(point.x, point.y)) {\n      return false;\n    }\n    this.worldTransform.applyInverse(point, tempPoint);\n    var vertices = this.geometry.getBuffer('aVertexPosition').data;\n    var points = tempPolygon.points;\n    var indices = this.geometry.getIndex().data;\n    var len = indices.length;\n    var step = this.drawMode === 4 ? 3 : 1;\n    for (var i = 0; i + 2 < len; i += step) {\n      var ind0 = indices[i] * 2;\n      var ind1 = indices[i + 1] * 2;\n      var ind2 = indices[i + 2] * 2;\n      points[0] = vertices[ind0];\n      points[1] = vertices[ind0 + 1];\n      points[2] = vertices[ind1];\n      points[3] = vertices[ind1 + 1];\n      points[4] = vertices[ind2];\n      points[5] = vertices[ind2 + 1];\n      if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  Mesh.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n    if (this._cachedTexture) {\n      this._cachedTexture.destroy();\n      this._cachedTexture = null;\n    }\n    this.geometry = null;\n    this.shader = null;\n    this.state = null;\n    this.uvs = null;\n    this.indices = null;\n    this.vertexData = null;\n  };\n  /**\n   * The maximum number of vertices to consider batchable. Generally, the complexity\n   * of the geometry.\n   */\n  Mesh.BATCHABLE_SIZE = 100;\n  return Mesh;\n}(_display.Container);\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n *\n * @memberof PIXI\n */\nvar MeshMaterial = /** @class */function (_super) {\n  __extends(MeshMaterial, _super);\n  /**\n   * @param uSampler - Texture that material uses to render.\n   * @param options - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {number} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n  function MeshMaterial(uSampler, options) {\n    var _this = this;\n    var uniforms = {\n      uSampler: uSampler,\n      alpha: 1,\n      uTextureMatrix: _math.Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    };\n    // Set defaults\n    options = Object.assign({\n      tint: 0xFFFFFF,\n      alpha: 1,\n      pluginName: 'batch'\n    }, options);\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n    _this = _super.call(this, options.program || _core.Program.from(vertex, fragment), uniforms) || this;\n    _this._colorDirty = false;\n    _this.uvMatrix = new _core.TextureMatrix(uSampler);\n    _this.batchable = options.program === undefined;\n    _this.pluginName = options.pluginName;\n    _this.tint = options.tint;\n    _this.alpha = options.alpha;\n    return _this;\n  }\n  Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n    /** Reference to the texture being rendered. */\n    get: function () {\n      return this.uniforms.uSampler;\n    },\n    set: function (value) {\n      if (this.uniforms.uSampler !== value) {\n        this.uniforms.uSampler = value;\n        this.uvMatrix.texture = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n    get: function () {\n      return this._alpha;\n    },\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     */\n    set: function (value) {\n      if (value === this._alpha) {\n        return;\n      }\n      this._alpha = value;\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n    get: function () {\n      return this._tint;\n    },\n    /**\n     * Multiply tint for the material.\n     *\n     * @default 0xFFFFFF\n     */\n    set: function (value) {\n      if (value === this._tint) {\n        return;\n      }\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets called automatically by the Mesh. Intended to be overridden for custom\n   * {@link MeshMaterial} objects.\n   */\n  MeshMaterial.prototype.update = function () {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      var baseTexture = this.texture.baseTexture;\n      (0, _utils.premultiplyTintToRgba)(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n    }\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  };\n  return MeshMaterial;\n}(_core.Shader);\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n *\n * @memberof PIXI\n */\nvar MeshGeometry = /** @class */function (_super) {\n  __extends(MeshGeometry, _super);\n  /**\n   * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n   * @param {Float32Array|number[]} [uvs] - Texture UVs.\n   * @param {Uint16Array|number[]} [index] - IndexBuffer\n   */\n  function MeshGeometry(vertices, uvs, index) {\n    var _this = _super.call(this) || this;\n    var verticesBuffer = new _core.Buffer(vertices);\n    var uvsBuffer = new _core.Buffer(uvs, true);\n    var indexBuffer = new _core.Buffer(index, true, true);\n    _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, _constants.TYPES.FLOAT).addAttribute('aTextureCoord', uvsBuffer, 2, false, _constants.TYPES.FLOAT).addIndex(indexBuffer);\n    _this._updateId = -1;\n    return _this;\n  }\n  Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n    /**\n     * If the vertex position is updated.\n     *\n     * @readonly\n     * @private\n     */\n    get: function () {\n      return this.buffers[0]._updateID;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return MeshGeometry;\n}(_core.Geometry);\n\nexports.Mesh = Mesh;\nexports.MeshBatchUvs = MeshBatchUvs;\nexports.MeshGeometry = MeshGeometry;\nexports.MeshMaterial = MeshMaterial;\n//# sourceMappingURL=mesh.js.map"},"hash":"2062076abbe023d7b71874af7befad5c"}