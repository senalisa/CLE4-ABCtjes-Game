{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @pixi/math - v6.3.2\n * Compiled Wed, 04 May 2022 17:49:13 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Two Pi.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar DEG_TO_RAD = Math.PI / 180;\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nvar SHAPES;\n(function (SHAPES) {\n  SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n  SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n  SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n  SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n  SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (exports.SHAPES = SHAPES = {}));\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nvar Point = /** @class */function () {\n  /** Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function Point(x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    /** Position of the point on the x axis */\n    this.x = 0;\n    /** Position of the point on the y axis */\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /** Creates a clone of this point\n   * @returns A clone of this point\n   */\n  Point.prototype.clone = function () {\n    return new Point(this.x, this.y);\n  };\n  /**\n   * Copies `x` and `y` from the given point into this point\n   *\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n  Point.prototype.copyFrom = function (p) {\n    this.set(p.x, p.y);\n    return this;\n  };\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   *\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  Point.prototype.copyTo = function (p) {\n    p.set(this.x, this.y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   *\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  Point.prototype.equals = function (p) {\n    return p.x === this.x && p.y === this.y;\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   *\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n  Point.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  Point.prototype.toString = function () {\n    return \"[@pixi/math:Point x=\" + this.x + \" y=\" + this.y + \"]\";\n  };\n  return Point;\n}();\n\nvar tempPoints = [new Point(), new Point(), new Point(), new Point()];\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n */\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @memberof PIXI\n */\nvar Rectangle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  function Rectangle(x, y, width, height) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n  Object.defineProperty(Rectangle.prototype, \"left\", {\n    /** Returns the left edge of the rectangle. */\n    get: function () {\n      return this.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"right\", {\n    /** Returns the right edge of the rectangle. */\n    get: function () {\n      return this.x + this.width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"top\", {\n    /** Returns the top edge of the rectangle. */\n    get: function () {\n      return this.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"bottom\", {\n    /** Returns the bottom edge of the rectangle. */\n    get: function () {\n      return this.y + this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle, \"EMPTY\", {\n    /** A constant empty rectangle. */\n    get: function () {\n      return new Rectangle(0, 0, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a clone of this Rectangle\n   *\n   * @return a copy of the rectangle\n   */\n  Rectangle.prototype.clone = function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Copies another rectangle to this one.\n   *\n   * @param rectangle - The rectangle to copy from.\n   * @return Returns itself.\n   */\n  Rectangle.prototype.copyFrom = function (rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n  /**\n   * Copies this rectangle to another one.\n   *\n   * @param rectangle - The rectangle to copy to.\n   * @return Returns given parameter.\n   */\n  Rectangle.prototype.copyTo = function (rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coordinates are within this Rectangle\n   */\n  Rectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   *\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n  Rectangle.prototype.intersects = function (other, transform) {\n    if (!transform) {\n      var x0_1 = this.x < other.x ? other.x : this.x;\n      var x1_1 = this.right > other.right ? other.right : this.right;\n      if (x1_1 <= x0_1) {\n        return false;\n      }\n      var y0_1 = this.y < other.y ? other.y : this.y;\n      var y1_1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y1_1 > y0_1;\n    }\n    var x0 = this.left;\n    var x1 = this.right;\n    var y0 = this.top;\n    var y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    var lt = tempPoints[0].set(other.left, other.top);\n    var lb = tempPoints[1].set(other.left, other.bottom);\n    var rt = tempPoints[2].set(other.right, other.top);\n    var rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    var s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    var nx = s * (lb.y - lt.y);\n    var ny = s * (lt.x - lb.x);\n    var n00 = nx * x0 + ny * y0;\n    var n10 = nx * x1 + ny * y0;\n    var n01 = nx * x0 + ny * y1;\n    var n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    var mx = s * (lt.y - rt.y);\n    var my = s * (rt.x - lt.x);\n    var m00 = mx * x0 + my * y0;\n    var m10 = mx * x1 + my * y0;\n    var m01 = mx * x0 + my * y1;\n    var m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  };\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   *\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @return Returns itself.\n   */\n  Rectangle.prototype.pad = function (paddingX, paddingY) {\n    if (paddingX === void 0) {\n      paddingX = 0;\n    }\n    if (paddingY === void 0) {\n      paddingY = paddingX;\n    }\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  };\n  /**\n   * Fits this rectangle around the passed one.\n   *\n   * @param rectangle - The rectangle to fit.\n   * @return Returns itself.\n   */\n  Rectangle.prototype.fit = function (rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  };\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   *\n   * @param resolution - resolution\n   * @param eps - precision\n   * @return Returns itself.\n   */\n  Rectangle.prototype.ceil = function (resolution, eps) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n    if (eps === void 0) {\n      eps = 0.001;\n    }\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  };\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param rectangle - The rectangle to include.\n   * @return Returns itself.\n   */\n  Rectangle.prototype.enlarge = function (rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  };\n  Rectangle.prototype.toString = function () {\n    return \"[@pixi/math:Rectangle x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n  return Rectangle;\n}();\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\nvar Circle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  function Circle(x, y, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (radius === void 0) {\n      radius = 0;\n    }\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.type = SHAPES.CIRC;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return A copy of the Circle\n   */\n  Circle.prototype.clone = function () {\n    return new Circle(this.x, this.y, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coordinates are within this Circle\n   */\n  Circle.prototype.contains = function (x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n    var r2 = this.radius * this.radius;\n    var dx = this.x - x;\n    var dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  };\n  /**\n  * Returns the framing rectangle of the circle as a Rectangle object\n  *\n  * @return The framing rectangle\n  */\n  Circle.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n  };\n  Circle.prototype.toString = function () {\n    return \"[@pixi/math:Circle x=\" + this.x + \" y=\" + this.y + \" radius=\" + this.radius + \"]\";\n  };\n  return Circle;\n}();\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\nvar Ellipse = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  function Ellipse(x, y, halfWidth, halfHeight) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (halfWidth === void 0) {\n      halfWidth = 0;\n    }\n    if (halfHeight === void 0) {\n      halfHeight = 0;\n    }\n    this.x = x;\n    this.y = y;\n    this.width = halfWidth;\n    this.height = halfHeight;\n    this.type = SHAPES.ELIP;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {PIXI.Ellipse} A copy of the ellipse\n   */\n  Ellipse.prototype.clone = function () {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coords are within this ellipse\n   */\n  Ellipse.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    // normalize the coords to an ellipse with center 0,0\n    var normx = (x - this.x) / this.width;\n    var normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  };\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return The framing rectangle\n   */\n  Ellipse.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  };\n  Ellipse.prototype.toString = function () {\n    return \"[@pixi/math:Ellipse x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n  return Ellipse;\n}();\n\n/**\n * A class to define a shape via user defined coordinates.\n *\n * @memberof PIXI\n */\nvar Polygon = /** @class */function () {\n  /**\n   * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  function Polygon() {\n    var arguments$1 = arguments;\n\n    var points = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      points[_i] = arguments$1[_i];\n    }\n    var flat = Array.isArray(points[0]) ? points[0] : points;\n    // if this is an array of points, convert it to a flat array of numbers\n    if (typeof flat[0] !== 'number') {\n      var p = [];\n      for (var i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   *\n   * @return - A copy of the polygon.\n   */\n  Polygon.prototype.clone = function () {\n    var points = this.points.slice();\n    var polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  };\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   *\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @return - Whether the x/y coordinates are within this polygon.\n   */\n  Polygon.prototype.contains = function (x, y) {\n    var inside = false;\n    // use some raycasting to test hits\n    // https://github.com/substack/point-in-polygon/blob/master/index.js\n    var length = this.points.length / 2;\n    for (var i = 0, j = length - 1; i < length; j = i++) {\n      var xi = this.points[i * 2];\n      var yi = this.points[i * 2 + 1];\n      var xj = this.points[j * 2];\n      var yj = this.points[j * 2 + 1];\n      var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  };\n  Polygon.prototype.toString = function () {\n    return \"[@pixi/math:Polygon\" + (\"closeStroke=\" + this.closeStroke) + (\"points=\" + this.points.reduce(function (pointsDesc, currentPoint) {\n      return pointsDesc + \", \" + currentPoint;\n    }, '') + \"]\");\n  };\n  return Polygon;\n}();\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @memberof PIXI\n */\nvar RoundedRectangle = /** @class */function () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  function RoundedRectangle(x, y, width, height, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (width === void 0) {\n      width = 0;\n    }\n    if (height === void 0) {\n      height = 0;\n    }\n    if (radius === void 0) {\n      radius = 20;\n    }\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.type = SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   *\n   * @return - A copy of the rounded rectangle.\n   */\n  RoundedRectangle.prototype.clone = function () {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   *\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @return - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  RoundedRectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        var dx = x - (this.x + radius);\n        var dy = y - (this.y + radius);\n        var radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  RoundedRectangle.prototype.toString = function () {\n    return \"[@pixi/math:RoundedRectangle x=\" + this.x + \" y=\" + this.y + (\"width=\" + this.width + \" height=\" + this.height + \" radius=\" + this.radius + \"]\");\n  };\n  return RoundedRectangle;\n}();\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n *\n * @memberof PIXI\n */\nvar ObservablePoint = /** @class */function () {\n  /**\n   * Creates a new `ObservablePoint`\n   *\n   * @param cb - callback function triggered when `x` and/or `y` are changed\n   * @param scope - owner of callback\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n  */\n  function ObservablePoint(cb, scope, x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  /**\n   * Creates a clone of this point.\n   * The callback and scope params can be overridden otherwise they will default\n   * to the clone object's values.\n   *\n   * @override\n   * @param cb - The callback function triggered when `x` and/or `y` are changed\n   * @param scope - The owner of the callback\n   * @return a copy of this observable point\n   */\n  ObservablePoint.prototype.clone = function (cb, scope) {\n    if (cb === void 0) {\n      cb = this.cb;\n    }\n    if (scope === void 0) {\n      scope = this.scope;\n    }\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   *\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  ObservablePoint.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = x;\n    }\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies x and y from the given point (`p`)\n   *\n   * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n   * @returns The observable point instance itself\n   */\n  ObservablePoint.prototype.copyFrom = function (p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n    return this;\n  };\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   *\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n  ObservablePoint.prototype.copyTo = function (p) {\n    p.set(this._x, this._y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   *\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  ObservablePoint.prototype.equals = function (p) {\n    return p.x === this._x && p.y === this._y;\n  };\n  ObservablePoint.prototype.toString = function () {\n    return \"[@pixi/math:ObservablePoint x=\" + 0 + \" y=\" + 0 + \" scope=\" + this.scope + \"]\";\n  };\n  Object.defineProperty(ObservablePoint.prototype, \"x\", {\n    /** Position of the observable point on the x axis. */\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservablePoint.prototype, \"y\", {\n    /** Position of the observable point on the y axis. */\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ObservablePoint;\n}();\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n *\n * @memberof PIXI\n */\nvar Matrix = /** @class */function () {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n    if (b === void 0) {\n      b = 0;\n    }\n    if (c === void 0) {\n      c = 0;\n    }\n    if (d === void 0) {\n      d = 1;\n    }\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   *\n   * @param array - The array that the matrix will be populated from.\n   */\n  Matrix.prototype.fromArray = function (array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  };\n  /**\n   * Sets the matrix properties.\n   *\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  };\n  /**\n   * Creates an array from the current Matrix object.\n   *\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @return The newly created array which contains the matrix\n   */\n  Matrix.prototype.toArray = function (transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    var array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  };\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   *\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, transformed through this matrix\n   */\n  Matrix.prototype.apply = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  };\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   *\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n  Matrix.prototype.applyInverse = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n  };\n  /**\n   * Translates the matrix on the x and y.\n   *\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.translate = function (x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  };\n  /**\n   * Applies a scale transformation to the matrix.\n   *\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.scale = function (x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  };\n  /**\n   * Applies a rotation transformation to the matrix.\n   *\n   * @param angle - The angle in radians.\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.rotate = function (angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  };\n  /**\n   * Appends the given Matrix to this Matrix.\n   *\n   * @param matrix - The matrix to append.\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.append = function (matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  };\n  /**\n   * Sets the matrix based on all the available properties\n   *\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  };\n  /**\n   * Prepends the given Matrix to this Matrix.\n   *\n   * @param matrix - The matrix to prepend\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.prepend = function (matrix) {\n    var tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      var a1 = this.a;\n      var c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  };\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   *\n   * @param transform - The transform to apply the properties to.\n   * @return The transform with the newly applied properties\n   */\n  Matrix.prototype.decompose = function (transform) {\n    // sort out rotation / skew..\n    var a = this.a;\n    var b = this.b;\n    var c = this.c;\n    var d = this.d;\n    var pivot = transform.pivot;\n    var skewX = -Math.atan2(-c, d);\n    var skewY = Math.atan2(b, a);\n    var delta = Math.abs(skewX + skewY);\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    // next set scale\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    // next set position\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  };\n  /**\n   * Inverts this matrix\n   *\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.invert = function () {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    var tx1 = this.tx;\n    var n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  };\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   *\n   * @return This matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.identity = function () {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  };\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   *\n   * @return A copy of this matrix. Good for chaining method calls.\n   */\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   *\n   * @param matrix - The matrix to copy to.\n   * @return The matrix given in parameter with its values updated.\n   */\n  Matrix.prototype.copyTo = function (matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @return {PIXI.Matrix} this\n   */\n  Matrix.prototype.copyFrom = function (matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  };\n  Matrix.prototype.toString = function () {\n    return \"[@pixi/math:Matrix a=\" + this.a + \" b=\" + this.b + \" c=\" + this.c + \" d=\" + this.d + \" tx=\" + this.tx + \" ty=\" + this.ty + \"]\";\n  };\n  Object.defineProperty(Matrix, \"IDENTITY\", {\n    /**\n     * A default (identity) matrix\n     *\n     * @readonly\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n    /**\n     * A temp matrix\n     *\n     * @readonly\n     */\n    get: function () {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Matrix;\n}();\n\n// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init() {\n  for (var i = 0; i < 16; i++) {\n    var row = [];\n    rotationCayley.push(row);\n    for (var j = 0; j < 16; j++) {\n      /* Multiplies rotation matrices i and j. */\n      var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      /* Finds rotation matrix matching the product and pushes it. */\n      for (var k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (var i = 0; i < 16; i++) {\n    var mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nvar groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  E: 0,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SE: 1,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  S: 2,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SW: 3,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  W: 4,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NW: 5,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  N: 6,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NE: 7,\n  /**\n   * Reflection about Y-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_VERTICAL: 8,\n  /**\n   * Reflection about the main diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MAIN_DIAGONAL: 10,\n  /**\n   * Reflection about X-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_HORIZONTAL: 12,\n  /**\n   * Reflection about reverse diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  REVERSE_DIAGONAL: 14,\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: function (ind) {\n    return ux[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: function (ind) {\n    return uy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: function (ind) {\n    return vx[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: function (ind) {\n    return vy[ind];\n  },\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: function (rotation) {\n    if (rotation & 8) // true only if between 8 & 15 (reflections)\n      {\n        return rotation & 15; // or rotation % 16\n      }\n    return -rotation & 7; // or (8 - rotation) % 8\n  },\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @return {PIXI.GD8Symmetry} Composed operation\n   */\n  add: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][rotationFirst];\n  },\n  /**\n   * Reverse of `add`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n   * @return {PIXI.GD8Symmetry} Result\n   */\n  sub: function (rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][groupD8.inv(rotationFirst)];\n  },\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: function (rotation) {\n    return rotation ^ 4;\n  },\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: function (rotation) {\n    return (rotation & 3) === 2;\n  },\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @return {PIXI.GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: function (dx, dy) {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.Matrix} matrix - sprite world matrix\n   * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: function (matrix, rotation, tx, ty) {\n    if (tx === void 0) {\n      tx = 0;\n    }\n    if (ty === void 0) {\n      ty = 0;\n    }\n    // Packer used \"rotation\", we use \"inv(rotation)\"\n    var mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\n\n/**\n * Transform that takes care about its versions.\n *\n * @memberof PIXI\n */\nvar Transform = /** @class */function () {\n  function Transform() {\n    this.worldTransform = new Matrix();\n    this.localTransform = new Matrix();\n    this.position = new ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  /** Called when a value changes. */\n  Transform.prototype.onChange = function () {\n    this._localID++;\n  };\n  /** Called when the skew or the rotation changes. */\n  Transform.prototype.updateSkew = function () {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n    this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n    this._localID++;\n  };\n  Transform.prototype.toString = function () {\n    return \"[@pixi/math:Transform \" + (\"position=(\" + this.position.x + \", \" + this.position.y + \") \") + (\"rotation=\" + this.rotation + \" \") + (\"scale=(\" + this.scale.x + \", \" + this.scale.y + \") \") + (\"skew=(\" + this.skew.x + \", \" + this.skew.y + \") \") + \"]\";\n  };\n  /** Updates the local transformation matrix. */\n  Transform.prototype.updateLocalTransform = function () {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n  };\n  /**\n   * Updates the local and the world transformation matrices.\n   *\n   * @param parentTransform - The parent transform\n   */\n  Transform.prototype.updateTransform = function (parentTransform) {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID;\n      // force an update..\n      this._parentID = -1;\n    }\n    if (this._parentID !== parentTransform._worldID) {\n      // concat the parent matrix with the objects transform.\n      var pt = parentTransform.worldTransform;\n      var wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID;\n      // update the id of the transform..\n      this._worldID++;\n    }\n  };\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   *\n   * @param matrix - The matrix to decompose\n   */\n  Transform.prototype.setFromMatrix = function (matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  };\n  Object.defineProperty(Transform.prototype, \"rotation\", {\n    /** The rotation of the object in radians. */\n    get: function () {\n      return this._rotation;\n    },\n    set: function (value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** A default (identity) transform. */\n  Transform.IDENTITY = new Transform();\n  return Transform;\n}();\n\nexports.Circle = Circle;\nexports.DEG_TO_RAD = DEG_TO_RAD;\nexports.Ellipse = Ellipse;\nexports.Matrix = Matrix;\nexports.ObservablePoint = ObservablePoint;\nexports.PI_2 = PI_2;\nexports.Point = Point;\nexports.Polygon = Polygon;\nexports.RAD_TO_DEG = RAD_TO_DEG;\nexports.Rectangle = Rectangle;\nexports.RoundedRectangle = RoundedRectangle;\nexports.SHAPES = SHAPES;\nexports.Transform = Transform;\nexports.groupD8 = groupD8;\n//# sourceMappingURL=math.js.map"},"hash":"10d2d6d0670f5c0539babb1ce94d315f"}