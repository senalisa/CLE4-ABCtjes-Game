{"dependencies":[{"name":"@pixi/core","loc":{"line":8,"column":44}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoiseFilter = undefined;\n\nvar _core = require(\"@pixi/core\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n}; /*!\n    * @pixi/filter-noise - v6.3.2\n    * Compiled Wed, 04 May 2022 17:49:13 UTC\n    *\n    * @pixi/filter-noise is licensed under the MIT License.\n    * http://www.opensource.org/licenses/mit-license\n    */\n\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar fragment = \"precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n *\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nvar NoiseFilter = /** @class */function (_super) {\n  __extends(NoiseFilter, _super);\n  /**\n   * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n   * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n   */\n  function NoiseFilter(noise, seed) {\n    if (noise === void 0) {\n      noise = 0.5;\n    }\n    if (seed === void 0) {\n      seed = Math.random();\n    }\n    var _this = _super.call(this, _core.defaultFilterVertex, fragment, {\n      uNoise: 0,\n      uSeed: 0\n    }) || this;\n    _this.noise = noise;\n    _this.seed = seed;\n    return _this;\n  }\n  Object.defineProperty(NoiseFilter.prototype, \"noise\", {\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     *\n     * @default 0.5\n     */\n    get: function () {\n      return this.uniforms.uNoise;\n    },\n    set: function (value) {\n      this.uniforms.uNoise = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NoiseFilter.prototype, \"seed\", {\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get: function () {\n      return this.uniforms.uSeed;\n    },\n    set: function (value) {\n      this.uniforms.uSeed = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return NoiseFilter;\n}(_core.Filter);\n\nexports.NoiseFilter = NoiseFilter;\n//# sourceMappingURL=filter-noise.js.map"},"hash":"4897f0365e4de93fd964a74c1c0e41b4"}