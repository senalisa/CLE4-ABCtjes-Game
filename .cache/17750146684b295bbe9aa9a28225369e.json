{"dependencies":[{"name":"@pixi/math","loc":{"line":8,"column":22}},{"name":"@pixi/ticker","loc":{"line":9,"column":40}},{"name":"@pixi/display","loc":{"line":10,"column":54}},{"name":"@pixi/utils","loc":{"line":11,"column":29}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interactiveTarget = exports.InteractionTrackingData = exports.InteractionManager = exports.InteractionEvent = exports.InteractionData = undefined;\n\nvar _math = require(\"@pixi/math\");\n\nvar _ticker = require(\"@pixi/ticker\");\n\nvar _display = require(\"@pixi/display\");\n\nvar _utils = require(\"@pixi/utils\");\n\n/**\n * Holds all information related to an Interaction event\n *\n * @memberof PIXI\n */\n/*!\n * @pixi/interaction - v6.3.2\n * Compiled Wed, 04 May 2022 17:49:13 UTC\n *\n * @pixi/interaction is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nvar InteractionData = /** @class */function () {\n  function InteractionData() {\n    /**\n     * Pressure applied by the pointing device during the event. A Touch's force property\n     * will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    this.pressure = 0;\n    /**\n     * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n     */\n    this.rotationAngle = 0;\n    /**\n     * Twist of a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    this.twist = 0;\n    /**\n     * Barrel pressure on a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    this.tangentialPressure = 0;\n    this.global = new _math.Point();\n    this.target = null;\n    this.originalEvent = null;\n    this.identifier = null;\n    this.isPrimary = false;\n    this.button = 0;\n    this.buttons = 0;\n    this.width = 0;\n    this.height = 0;\n    this.tiltX = 0;\n    this.tiltY = 0;\n    this.pointerType = null;\n    this.pressure = 0;\n    this.rotationAngle = 0;\n    this.twist = 0;\n    this.tangentialPressure = 0;\n  }\n  Object.defineProperty(InteractionData.prototype, \"pointerId\", {\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     *\n     * @readonly\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get: function () {\n      return this.identifier;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This will return the local coordinates of the specified displayObject for this InteractionData\n   *\n   * @param displayObject - The DisplayObject that you would like the local\n   *  coords off\n   * @param point - A Point object in which to store the value, optional (otherwise\n   *  will create a new point)\n   * @param globalPos - A Point object containing your custom global coords, optional\n   *  (otherwise will use the current global coords)\n   * @return - A point containing the coordinates of the InteractionData position relative\n   *  to the DisplayObject\n   */\n  InteractionData.prototype.getLocalPosition = function (displayObject, point, globalPos) {\n    return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n  };\n  /**\n   * Copies properties from normalized event data.\n   *\n   * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n   */\n  InteractionData.prototype.copyEvent = function (event) {\n    // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n    // it with \"false\" on later events when our shim for it on touch events might not be\n    // accurate\n    if ('isPrimary' in event && event.isPrimary) {\n      this.isPrimary = true;\n    }\n    this.button = 'button' in event && event.button;\n    // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n    // event.which property instead, which conveys the same information.\n    var buttons = 'buttons' in event && event.buttons;\n    this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n    this.width = 'width' in event && event.width;\n    this.height = 'height' in event && event.height;\n    this.tiltX = 'tiltX' in event && event.tiltX;\n    this.tiltY = 'tiltY' in event && event.tiltY;\n    this.pointerType = 'pointerType' in event && event.pointerType;\n    this.pressure = 'pressure' in event && event.pressure;\n    this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n    this.twist = 'twist' in event && event.twist || 0;\n    this.tangentialPressure = 'tangentialPressure' in event && event.tangentialPressure || 0;\n  };\n  /** Resets the data for pooling. */\n  InteractionData.prototype.reset = function () {\n    // isPrimary is the only property that we really need to reset - everything else is\n    // guaranteed to be overwritten\n    this.isPrimary = false;\n  };\n  return InteractionData;\n}();\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * Event class that mimics native DOM events.\n *\n * @memberof PIXI\n */\nvar InteractionEvent = /** @class */function () {\n  function InteractionEvent() {\n    this.stopped = false;\n    this.stopsPropagatingAt = null;\n    this.stopPropagationHint = false;\n    this.target = null;\n    this.currentTarget = null;\n    this.type = null;\n    this.data = null;\n  }\n  /** Prevents event from reaching any objects other than the current object. */\n  InteractionEvent.prototype.stopPropagation = function () {\n    this.stopped = true;\n    this.stopPropagationHint = true;\n    this.stopsPropagatingAt = this.currentTarget;\n  };\n  /** Resets the event. */\n  InteractionEvent.prototype.reset = function () {\n    this.stopped = false;\n    this.stopsPropagatingAt = null;\n    this.stopPropagationHint = false;\n    this.currentTarget = null;\n    this.target = null;\n  };\n  return InteractionEvent;\n}();\n\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar InteractionTrackingData = /** @class */function () {\n  /**\n   * @param {number} pointerId - Unique pointer id of the event\n   * @private\n   */\n  function InteractionTrackingData(pointerId) {\n    this._pointerId = pointerId;\n    this._flags = InteractionTrackingData.FLAGS.NONE;\n  }\n  /**\n   *\n   * @private\n   * @param {number} flag - The interaction flag to set\n   * @param {boolean} yn - Should the flag be set or unset\n   */\n  InteractionTrackingData.prototype._doSet = function (flag, yn) {\n    if (yn) {\n      this._flags = this._flags | flag;\n    } else {\n      this._flags = this._flags & ~flag;\n    }\n  };\n  Object.defineProperty(InteractionTrackingData.prototype, \"pointerId\", {\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._pointerId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"flags\", {\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._flags;\n    },\n    set: function (flags) {\n      this._flags = flags;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"none\", {\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get: function () {\n      return this._flags === InteractionTrackingData.FLAGS.NONE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"over\", {\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"rightDown\", {\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"leftDown\", {\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function () {\n      return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    },\n    set: function (yn) {\n      this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  InteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2\n  });\n  return InteractionTrackingData;\n}();\n\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @memberof PIXI\n */\nvar TreeSearch = /** @class */function () {\n  function TreeSearch() {\n    this._tempPoint = new _math.Point();\n  }\n  /**\n   * Recursive implementation for findHit\n   *\n   * @private\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - this indicates if the objects inside should be hit test against the point\n   * @param interactive - Whether the displayObject is interactive\n   * @return - Returns true if the displayObject hit the point\n   */\n  TreeSearch.prototype.recursiveFindHit = function (interactionEvent, displayObject, func, hitTest, interactive) {\n    if (!displayObject || !displayObject.visible) {\n      return false;\n    }\n    var point = interactionEvent.data.global;\n    // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n    //\n    // This function will now loop through all objects and then only hit test the objects it HAS\n    // to, not all of them. MUCH faster..\n    // An object will be hit test if the following is true:\n    //\n    // 1: It is interactive.\n    // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n    //\n    // As another little optimization once an interactive object has been hit we can carry on\n    // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n    // A final optimization is that an object is not hit test directly if a child has already been hit.\n    interactive = displayObject.interactive || interactive;\n    var hit = false;\n    var interactiveParent = interactive;\n    // Flag here can set to false if the event is outside the parents hitArea or mask\n    var hitTestChildren = true;\n    // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n    // There is also no longer a need to hitTest children.\n    if (displayObject.hitArea) {\n      if (hitTest) {\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n        if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y)) {\n          hitTest = false;\n          hitTestChildren = false;\n        } else {\n          hit = true;\n        }\n      }\n      interactiveParent = false;\n    }\n    // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n    // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n    // https://github.com/pixijs/pixi.js/issues/5135\n    else if (displayObject._mask) {\n        if (hitTest) {\n          if (!(displayObject._mask.containsPoint && displayObject._mask.containsPoint(point))) {\n            hitTest = false;\n          }\n        }\n      }\n    // ** FREE TIP **! If an object is not interactive or has no buttons in it\n    // (such as a game scene!) set interactiveChildren to false for that displayObject.\n    // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n    if (hitTestChildren && displayObject.interactiveChildren && displayObject.children) {\n      var children = displayObject.children;\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i];\n        // time to get recursive.. if this function will return if something is hit..\n        var childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n        if (childHit) {\n          // its a good idea to check if a child has lost its parent.\n          // this means it has been removed whilst looping so its best\n          if (!child.parent) {\n            continue;\n          }\n          // we no longer need to hit test any more objects in this container as we we\n          // now know the parent has been hit\n          interactiveParent = false;\n          // If the child is interactive , that means that the object hit was actually\n          // interactive and not just the child of an interactive object.\n          // This means we no longer need to hit test anything else. We still need to run\n          // through all objects, but we don't need to perform any hit tests.\n          if (childHit) {\n            if (interactionEvent.target) {\n              hitTest = false;\n            }\n            hit = true;\n          }\n        }\n      }\n    }\n    // no point running this if the item is not interactive or does not have an interactive parent.\n    if (interactive) {\n      // if we are hit testing (as in we have no hit any objects yet)\n      // We also don't need to worry about hit testing if once of the displayObjects children\n      // has already been hit - but only if it was interactive, otherwise we need to keep\n      // looking for an interactive child, just in case we hit one\n      if (hitTest && !interactionEvent.target) {\n        // already tested against hitArea if it is defined\n        if (!displayObject.hitArea && displayObject.containsPoint) {\n          if (displayObject.containsPoint(point)) {\n            hit = true;\n          }\n        }\n      }\n      if (displayObject.interactive) {\n        if (hit && !interactionEvent.target) {\n          interactionEvent.target = displayObject;\n        }\n        if (func) {\n          func(interactionEvent, displayObject, !!hit);\n        }\n      }\n    }\n    return hit;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @private\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - this indicates if the objects inside should be hit test against the point\n   * @return - Returns true if the displayObject hit the point\n   */\n  TreeSearch.prototype.findHit = function (interactionEvent, displayObject, func, hitTest) {\n    this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n  };\n  return TreeSearch;\n}();\n\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\nvar interactiveTarget = {\n  interactive: false,\n  interactiveChildren: true,\n  hitArea: null,\n  /**\n   * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n   * Setting this changes the 'cursor' property to `'pointer'`.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.buttonMode = true;\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  get buttonMode() {\n    return this.cursor === 'pointer';\n  },\n  set buttonMode(value) {\n    if (value) {\n      this.cursor = 'pointer';\n    } else if (this.cursor === 'pointer') {\n      this.cursor = null;\n    }\n  },\n  /**\n   * This defines what cursor mode is used when the mouse cursor\n   * is hovered over the displayObject.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.cursor = 'wait';\n   * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  cursor: null,\n  /**\n   * Internal set of all active pointers, by identifier\n   *\n   * @member {Map<number, InteractionTrackingData>}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   */\n  get trackedPointers() {\n    if (this._trackedPointers === undefined) {\n      this._trackedPointers = {};\n    }\n    return this._trackedPointers;\n  },\n  /**\n   * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n   *\n   * @private\n   * @type {Map<number, InteractionTrackingData>}\n   */\n  _trackedPointers: undefined\n};\n\n// Mix interactiveTarget into DisplayObject.prototype\n_display.DisplayObject.mixin(interactiveTarget);\nvar MOUSE_POINTER_ID = 1;\n// helpers for hitTest() - only used inside hitTest()\nvar hitTestEvent = {\n  target: null,\n  data: {\n    global: null\n  }\n};\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @memberof PIXI\n */\nvar InteractionManager = /** @class */function (_super) {\n  __extends(InteractionManager, _super);\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   * @param options - The options for the manager.\n   * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n   * @param {number} [options.interactionFrequency=10] - Maximum frequency (ms) at pointer over/out states will be checked.\n   * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n   */\n  function InteractionManager(renderer, options) {\n    var _this = _super.call(this) || this;\n    options = options || {};\n    _this.renderer = renderer;\n    _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n    _this.interactionFrequency = options.interactionFrequency || 10;\n    _this.mouse = new InteractionData();\n    _this.mouse.identifier = MOUSE_POINTER_ID;\n    // setting the mouse to start off far off screen will mean that mouse over does\n    //  not get called before we even move the mouse.\n    _this.mouse.global.set(-999999);\n    _this.activeInteractionData = {};\n    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;\n    _this.interactionDataPool = [];\n    _this.eventData = new InteractionEvent();\n    _this.interactionDOMElement = null;\n    _this.moveWhenInside = false;\n    _this.eventsAdded = false;\n    _this.tickerAdded = false;\n    _this.mouseOverRenderer = !('PointerEvent' in globalThis);\n    _this.supportsTouchEvents = 'ontouchstart' in globalThis;\n    _this.supportsPointerEvents = !!globalThis.PointerEvent;\n    // this will make it so that you don't have to call bind all the time\n    _this.onPointerUp = _this.onPointerUp.bind(_this);\n    _this.processPointerUp = _this.processPointerUp.bind(_this);\n    _this.onPointerCancel = _this.onPointerCancel.bind(_this);\n    _this.processPointerCancel = _this.processPointerCancel.bind(_this);\n    _this.onPointerDown = _this.onPointerDown.bind(_this);\n    _this.processPointerDown = _this.processPointerDown.bind(_this);\n    _this.onPointerMove = _this.onPointerMove.bind(_this);\n    _this.processPointerMove = _this.processPointerMove.bind(_this);\n    _this.onPointerOut = _this.onPointerOut.bind(_this);\n    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);\n    _this.onPointerOver = _this.onPointerOver.bind(_this);\n    _this.cursorStyles = {\n      default: 'inherit',\n      pointer: 'pointer'\n    };\n    _this.currentCursorMode = null;\n    _this.cursor = null;\n    _this.resolution = 1;\n    _this.delayedEvents = [];\n    _this.search = new TreeSearch();\n    _this._tempDisplayObject = new _display.TemporaryDisplayObject();\n    _this._eventListenerOptions = { capture: true, passive: false };\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object.\n     *\n     * @event PIXI.InteractionManager#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object.\n     *\n     * @event PIXI.InteractionManager#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object.\n     *\n     * @event PIXI.InteractionManager#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object.\n     *\n     * @event PIXI.InteractionManager#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n     *\n     * @event PIXI.InteractionManager#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n     *\n     * @event PIXI.InteractionManager#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object\n     *\n     * @event PIXI.InteractionManager#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     *\n     * @event PIXI.InteractionManager#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * Not always fired when some buttons are held down while others are released. In those cases,\n     * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n     * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n     *\n     * @event PIXI.InteractionManager#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a pointer event\n     *\n     * @event PIXI.InteractionManager#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     *\n     * @event PIXI.InteractionManager#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n     *\n     * @event PIXI.InteractionManager#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved off the display object\n     *\n     * @event PIXI.InteractionManager#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed on the display object.\n     *\n     * @event PIXI.InteractionManager#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed from the display object.\n     *\n     * @event PIXI.InteractionManager#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a touch\n     *\n     * @event PIXI.InteractionManager#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     *\n     * @event PIXI.InteractionManager#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n     *\n     * @event PIXI.InteractionManager#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is moved along the display object.\n     *\n     * @event PIXI.InteractionManager#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a pointer event.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a pointer device is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when the operating system cancels a touch.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    /**\n     * Fired when a touch point is moved along the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n    _this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n    _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);\n    return _this;\n  }\n  Object.defineProperty(InteractionManager.prototype, \"useSystemTicker\", {\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @default true\n     */\n    get: function () {\n      return this._useSystemTicker;\n    },\n    set: function (useSystemTicker) {\n      this._useSystemTicker = useSystemTicker;\n      if (useSystemTicker) {\n        this.addTickerListener();\n      } else {\n        this.removeTickerListener();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionManager.prototype, \"lastObjectRendered\", {\n    /**\n     * Last rendered object or temp object.\n     *\n     * @readonly\n     * @protected\n     */\n    get: function () {\n      return this.renderer._lastObjectRendered || this._tempDisplayObject;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Hit tests a point against the display tree, returning the first interactive object that is hit.\n   *\n   * @param globalPoint - A point to hit test with, in global space.\n   * @param root - The root display object to start from. If omitted, defaults\n   * to the last rendered root of the associated renderer.\n   * @return - The hit display object, if any.\n   */\n  InteractionManager.prototype.hitTest = function (globalPoint, root) {\n    // clear the target for our hit test\n    hitTestEvent.target = null;\n    // assign the global point\n    hitTestEvent.data.global = globalPoint;\n    // ensure safety of the root\n    if (!root) {\n      root = this.lastObjectRendered;\n    }\n    // run the hit test\n    this.processInteractive(hitTestEvent, root, null, true);\n    // return our found object - it'll be null if we didn't hit anything\n    return hitTestEvent.target;\n  };\n  /**\n   * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n   * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n   * another DOM element to receive those events.\n   *\n   * @param element - the DOM element which will receive mouse and touch events.\n   * @param resolution - The resolution / device pixel ratio of the new element (relative to the canvas).\n   */\n  InteractionManager.prototype.setTargetElement = function (element, resolution) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n    this.removeTickerListener();\n    this.removeEvents();\n    this.interactionDOMElement = element;\n    this.resolution = resolution;\n    this.addEvents();\n    this.addTickerListener();\n  };\n  /** Adds the ticker listener. */\n  InteractionManager.prototype.addTickerListener = function () {\n    if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker) {\n      return;\n    }\n    _ticker.Ticker.system.add(this.tickerUpdate, this, _ticker.UPDATE_PRIORITY.INTERACTION);\n    this.tickerAdded = true;\n  };\n  /** Removes the ticker listener. */\n  InteractionManager.prototype.removeTickerListener = function () {\n    if (!this.tickerAdded) {\n      return;\n    }\n    _ticker.Ticker.system.remove(this.tickerUpdate, this);\n    this.tickerAdded = false;\n  };\n  /** Registers all the DOM events. */\n  InteractionManager.prototype.addEvents = function () {\n    if (this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n    var style = this.interactionDOMElement.style;\n    if (globalThis.navigator.msPointerEnabled) {\n      style.msContentZooming = 'none';\n      style.msTouchAction = 'none';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = 'none';\n    }\n    /*\n     * These events are added first, so that if pointer events are normalized, they are fired\n     * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n     */\n    if (this.supportsPointerEvents) {\n      globalThis.document.addEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n      // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n      // we already handle those, so for the purposes of what we do in onPointerOut, we only\n      // care about the pointerleave event\n      this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.addEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n      globalThis.addEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n    } else {\n      globalThis.document.addEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.addEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n    }\n    // always look directly for touch events so that we can provide original data\n    // In a future version we should change this to being just a fallback and rely solely on\n    // PointerEvents whenever available\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n    }\n    this.eventsAdded = true;\n  };\n  /** Removes all the DOM events that were previously registered. */\n  InteractionManager.prototype.removeEvents = function () {\n    if (!this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n    var style = this.interactionDOMElement.style;\n    if (globalThis.navigator.msPointerEnabled) {\n      style.msContentZooming = '';\n      style.msTouchAction = '';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = '';\n    }\n    if (this.supportsPointerEvents) {\n      globalThis.document.removeEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.removeEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n      globalThis.removeEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n    } else {\n      globalThis.document.removeEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.removeEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n    }\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n    }\n    this.interactionDOMElement = null;\n    this.eventsAdded = false;\n  };\n  /**\n   * Updates the state of interactive objects if at least {@link interactionFrequency}\n   * milliseconds have passed since the last invocation.\n   *\n   * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n   *\n   * @param deltaTime - time delta since the last call\n   */\n  InteractionManager.prototype.tickerUpdate = function (deltaTime) {\n    this._deltaTime += deltaTime;\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n    this._deltaTime = 0;\n    this.update();\n  };\n  /** Updates the state of interactive objects. */\n  InteractionManager.prototype.update = function () {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n    // if the user move the mouse this check has already been done using the mouse move!\n    if (this._didMove) {\n      this._didMove = false;\n      return;\n    }\n    this.cursor = null;\n    // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n    // but there was a scenario of a display object moving under a static mouse cursor.\n    // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n    for (var k in this.activeInteractionData) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.activeInteractionData.hasOwnProperty(k)) {\n        var interactionData = this.activeInteractionData[k];\n        if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {\n          var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);\n          this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, true);\n        }\n      }\n    }\n    this.setCursorMode(this.cursor);\n  };\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   *\n   * @param mode - cursor mode, a key from the cursorStyles dictionary\n   */\n  InteractionManager.prototype.setCursorMode = function (mode) {\n    mode = mode || 'default';\n    var applyStyles = true;\n    // offscreen canvas does not support setting styles, but cursor modes can be functions,\n    // in order to handle pixi rendered cursors, so we can't bail\n    if (globalThis.OffscreenCanvas && this.interactionDOMElement instanceof OffscreenCanvas) {\n      applyStyles = false;\n    }\n    // if the mode didn't actually change, bail early\n    if (this.currentCursorMode === mode) {\n      return;\n    }\n    this.currentCursorMode = mode;\n    var style = this.cursorStyles[mode];\n    // only do things if there is a cursor style for it\n    if (style) {\n      switch (typeof style) {\n        case 'string':\n          // string styles are handled as cursor CSS\n          if (applyStyles) {\n            this.interactionDOMElement.style.cursor = style;\n          }\n          break;\n        case 'function':\n          // functions are just called, and passed the cursor mode\n          style(mode);\n          break;\n        case 'object':\n          // if it is an object, assume that it is a dictionary of CSS styles,\n          // apply it to the interactionDOMElement\n          if (applyStyles) {\n            Object.assign(this.interactionDOMElement.style, style);\n          }\n          break;\n      }\n    } else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n      // for the mode, then assume that the dev wants it to be CSS for the cursor.\n      this.interactionDOMElement.style.cursor = mode;\n    }\n  };\n  /**\n   * Dispatches an event on the display object that was interacted with.\n   *\n   * @param displayObject - the display object in question\n   * @param eventString - the name of the event (e.g, mousedown)\n   * @param eventData - the event data object\n   */\n  InteractionManager.prototype.dispatchEvent = function (displayObject, eventString, eventData) {\n    // Even if the event was stopped, at least dispatch any remaining events\n    // for the same display object.\n    if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt) {\n      eventData.currentTarget = displayObject;\n      eventData.type = eventString;\n      displayObject.emit(eventString, eventData);\n      if (displayObject[eventString]) {\n        displayObject[eventString](eventData);\n      }\n    }\n  };\n  /**\n   * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n   * ordering of over/out events.\n   *\n   * @param displayObject - the display object in question\n   * @param eventString - the name of the event (e.g, mousedown)\n   * @param eventData - the event data object\n   */\n  InteractionManager.prototype.delayDispatchEvent = function (displayObject, eventString, eventData) {\n    this.delayedEvents.push({ displayObject: displayObject, eventString: eventString, eventData: eventData });\n  };\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   *\n   * @param point - the point that the result will be stored in\n   * @param x - the x coord of the position to map\n   * @param y - the y coord of the position to map\n   */\n  InteractionManager.prototype.mapPositionToPoint = function (point, x, y) {\n    var rect;\n    // IE 11 fix\n    if (!this.interactionDOMElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: this.interactionDOMElement.width,\n        height: this.interactionDOMElement.height,\n        left: 0,\n        top: 0\n      };\n    } else {\n      rect = this.interactionDOMElement.getBoundingClientRect();\n    }\n    var resolutionMultiplier = 1.0 / this.resolution;\n    point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) * resolutionMultiplier;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @protected\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - indicates whether we want to calculate hits\n   *  or just iterate through all interactive objects\n   */\n  InteractionManager.prototype.processInteractive = function (interactionEvent, displayObject, func, hitTest) {\n    var hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n    var delayedEvents = this.delayedEvents;\n    if (!delayedEvents.length) {\n      return hit;\n    }\n    // Reset the propagation hint, because we start deeper in the tree again.\n    interactionEvent.stopPropagationHint = false;\n    var delayedLen = delayedEvents.length;\n    this.delayedEvents = [];\n    for (var i = 0; i < delayedLen; i++) {\n      var _a = delayedEvents[i],\n          displayObject_1 = _a.displayObject,\n          eventString = _a.eventString,\n          eventData = _a.eventData;\n      // When we reach the object we wanted to stop propagating at,\n      // set the propagation hint.\n      if (eventData.stopsPropagatingAt === displayObject_1) {\n        eventData.stopPropagationHint = true;\n      }\n      this.dispatchEvent(displayObject_1, eventString, eventData);\n    }\n    return hit;\n  };\n  /**\n   * Is called when the pointer button is pressed down on the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer button being pressed down\n   */\n  InteractionManager.prototype.onPointerDown = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    /*\n     * No need to prevent default on natural pointer events, as there are no side effects\n     * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n     * so still need to be prevented.\n     */\n    // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      var cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n      if (cancelable) {\n        originalEvent.preventDefault();\n      }\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n      this.emit('pointerdown', interactionEvent);\n      if (event.pointerType === 'touch') {\n        this.emit('touchstart', interactionEvent);\n      }\n      // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n      else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n          var isRightButton = event.button === 2;\n          this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n        }\n    }\n  };\n  /**\n   * Processes the result of the pointer down check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerDown = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (hit) {\n      if (!displayObject.trackedPointers[id]) {\n        displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n      }\n      this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n      } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {\n        var isRightButton = data.button === 2;\n        if (isRightButton) {\n          displayObject.trackedPointers[id].rightDown = true;\n        } else {\n          displayObject.trackedPointers[id].leftDown = true;\n        }\n        this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer button being released\n   * @param cancelled - true if the pointer is cancelled\n   * @param func - Function passed to {@link processInteractive}\n   */\n  InteractionManager.prototype.onPointerComplete = function (originalEvent, cancelled, func) {\n    var events = this.normalizeToPointerData(originalEvent);\n    var eventLen = events.length;\n    // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n    // in all cases (unless it was a pointercancel)\n    var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      // perform hit testing for events targeting our canvas or cancel events\n      this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n      this.emit(cancelled ? 'pointercancel' : \"pointerup\" + eventAppend, interactionEvent);\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? \"rightup\" + eventAppend : \"mouseup\" + eventAppend, interactionEvent);\n      } else if (event.pointerType === 'touch') {\n        this.emit(cancelled ? 'touchcancel' : \"touchend\" + eventAppend, interactionEvent);\n        this.releaseInteractionDataForPointerId(event.pointerId);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is cancelled\n   *\n   * @param event - The DOM event of a pointer button being released\n   */\n  InteractionManager.prototype.onPointerCancel = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n    this.onPointerComplete(event, true, this.processPointerCancel);\n  };\n  /**\n   * Processes the result of the pointer cancel check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   */\n  InteractionManager.prototype.processPointerCancel = function (interactionEvent, displayObject) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (displayObject.trackedPointers[id] !== undefined) {\n      delete displayObject.trackedPointers[id];\n      this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @param event - The DOM event of a pointer button being released\n   */\n  InteractionManager.prototype.onPointerUp = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n    this.onPointerComplete(event, false, this.processPointerUp);\n  };\n  /**\n   * Processes the result of the pointer up check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerUp = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var trackingData = displayObject.trackedPointers[id];\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    // need to track mouse down status in the mouse block so that we can emit\n    // event in a later block\n    var isMouseTap = false;\n    // Mouse only\n    if (isMouse) {\n      var isRightButton = data.button === 2;\n      var flags = InteractionTrackingData.FLAGS;\n      var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n      var isDown = trackingData !== undefined && trackingData.flags & test;\n      if (hit) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n        if (isDown) {\n          this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n          // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n          isMouseTap = true;\n        }\n      } else if (isDown) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n      }\n      // update the down state of the tracking data\n      if (trackingData) {\n        if (isRightButton) {\n          trackingData.rightDown = false;\n        } else {\n          trackingData.leftDown = false;\n        }\n      }\n    }\n    // Pointers and Touches, and Mouse\n    if (hit) {\n      this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n      }\n      if (trackingData) {\n        // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n        if (!isMouse || isMouseTap) {\n          this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n        }\n        if (isTouch) {\n          this.dispatchEvent(displayObject, 'tap', interactionEvent);\n          // touches are no longer over (if they ever were) when we get the touchend\n          // so we should ensure that we don't keep pretending that they are\n          trackingData.over = false;\n        }\n      }\n    } else if (trackingData) {\n      this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n      }\n    }\n    // Only remove the tracking data if there is no over/down state still associated with it\n    if (trackingData && trackingData.none) {\n      delete displayObject.trackedPointers[id];\n    }\n  };\n  /**\n   * Is called when the pointer moves across the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer moving\n   */\n  InteractionManager.prototype.onPointerMove = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen') {\n      this._didMove = true;\n      this.cursor = null;\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n      this.emit('pointermove', interactionEvent);\n      if (event.pointerType === 'touch') {\n        this.emit('touchmove', interactionEvent);\n      }\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        this.emit('mousemove', interactionEvent);\n      }\n    }\n    if (events[0].pointerType === 'mouse') {\n      this.setCursorMode(this.cursor);\n      // TODO BUG for parents interactive object (border order issue)\n    }\n  };\n  /**\n   * Processes the result of the pointer move check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerMove = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    if (isMouse) {\n      this.processPointerOverOut(interactionEvent, displayObject, hit);\n    }\n    if (!this.moveWhenInside || hit) {\n      this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n      }\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved out of the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n   */\n  InteractionManager.prototype.onPointerOut = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n    var events = this.normalizeToPointerData(originalEvent);\n    // Only mouse and pointer can call onPointerOut, so events will always be length 1\n    var event = events[0];\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = false;\n      this.setCursorMode(null);\n    }\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n    this.emit('pointerout', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseout', interactionEvent);\n    } else {\n      // we can get touchleave events after touchend, so we want to make sure we don't\n      // introduce memory leaks\n      this.releaseInteractionDataForPointerId(interactionData.identifier);\n    }\n  };\n  /**\n   * Processes the result of the pointer over/out check and dispatches the event if need be.\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n  InteractionManager.prototype.processPointerOverOut = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    var trackingData = displayObject.trackedPointers[id];\n    // if we just moused over the display object, then we need to track that state\n    if (hit && !trackingData) {\n      trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n    }\n    if (trackingData === undefined) {\n      return;\n    }\n    if (hit && this.mouseOverRenderer) {\n      if (!trackingData.over) {\n        trackingData.over = true;\n        this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n        if (isMouse) {\n          this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n        }\n      }\n      // only change the cursor if it has not already been changed (by something deeper in the\n      // display tree)\n      if (isMouse && this.cursor === null) {\n        this.cursor = displayObject.cursor;\n      }\n    } else if (trackingData.over) {\n      trackingData.over = false;\n      this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n      }\n      // if there is no mouse down information for the pointer, then it is safe to delete\n      if (trackingData.none) {\n        delete displayObject.trackedPointers[id];\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved into the renderer element.\n   *\n   * @param originalEvent - The DOM event of a pointer button being moved into the renderer view.\n   */\n  InteractionManager.prototype.onPointerOver = function (originalEvent) {\n    var events = this.normalizeToPointerData(originalEvent);\n    // Only mouse and pointer can call onPointerOver, so events will always be length 1\n    var event = events[0];\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = true;\n    }\n    this.emit('pointerover', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseover', interactionEvent);\n    }\n  };\n  /**\n   * Get InteractionData for a given pointerId. Store that data as well.\n   *\n   * @param event - Normalized pointer event, output from normalizeToPointerData.\n   * @return - Interaction data for the given pointer identifier.\n   */\n  InteractionManager.prototype.getInteractionDataForPointerId = function (event) {\n    var pointerId = event.pointerId;\n    var interactionData;\n    if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {\n      interactionData = this.mouse;\n    } else if (this.activeInteractionData[pointerId]) {\n      interactionData = this.activeInteractionData[pointerId];\n    } else {\n      interactionData = this.interactionDataPool.pop() || new InteractionData();\n      interactionData.identifier = pointerId;\n      this.activeInteractionData[pointerId] = interactionData;\n    }\n    // copy properties from the event, so that we can make sure that touch/pointer specific\n    // data is available\n    interactionData.copyEvent(event);\n    return interactionData;\n  };\n  /**\n   * Return unused InteractionData to the pool, for a given pointerId\n   *\n   * @param pointerId - Identifier from a pointer event\n   */\n  InteractionManager.prototype.releaseInteractionDataForPointerId = function (pointerId) {\n    var interactionData = this.activeInteractionData[pointerId];\n    if (interactionData) {\n      delete this.activeInteractionData[pointerId];\n      interactionData.reset();\n      this.interactionDataPool.push(interactionData);\n    }\n  };\n  /**\n   * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n   *\n   * @param interactionEvent - The event to be configured\n   * @param pointerEvent - The DOM event that will be paired with the InteractionEvent\n   * @param interactionData - The InteractionData that will be paired\n   *        with the InteractionEvent\n   * @return - the interaction event that was passed in\n   */\n  InteractionManager.prototype.configureInteractionEventForDOMEvent = function (interactionEvent, pointerEvent, interactionData) {\n    interactionEvent.data = interactionData;\n    this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n    // Not really sure why this is happening, but it's how a previous version handled things\n    if (pointerEvent.pointerType === 'touch') {\n      pointerEvent.globalX = interactionData.global.x;\n      pointerEvent.globalY = interactionData.global.y;\n    }\n    interactionData.originalEvent = pointerEvent;\n    interactionEvent.reset();\n    return interactionEvent;\n  };\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   *\n   * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n   * @return - An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n  InteractionManager.prototype.normalizeToPointerData = function (event) {\n    var normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n        var touch = event.changedTouches[i];\n        if (typeof touch.button === 'undefined') {\n          touch.button = event.touches.length ? 1 : 0;\n        }\n        if (typeof touch.buttons === 'undefined') {\n          touch.buttons = event.touches.length ? 1 : 0;\n        }\n        if (typeof touch.isPrimary === 'undefined') {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n        if (typeof touch.width === 'undefined') {\n          touch.width = touch.radiusX || 1;\n        }\n        if (typeof touch.height === 'undefined') {\n          touch.height = touch.radiusY || 1;\n        }\n        if (typeof touch.tiltX === 'undefined') {\n          touch.tiltX = 0;\n        }\n        if (typeof touch.tiltY === 'undefined') {\n          touch.tiltY = 0;\n        }\n        if (typeof touch.pointerType === 'undefined') {\n          touch.pointerType = 'touch';\n        }\n        if (typeof touch.pointerId === 'undefined') {\n          touch.pointerId = touch.identifier || 0;\n        }\n        if (typeof touch.pressure === 'undefined') {\n          touch.pressure = touch.force || 0.5;\n        }\n        if (typeof touch.twist === 'undefined') {\n          touch.twist = 0;\n        }\n        if (typeof touch.tangentialPressure === 'undefined') {\n          touch.tangentialPressure = 0;\n        }\n        // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n        // support, and the fill ins are not quite the same\n        // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n        // left is not 0,0 on the page\n        if (typeof touch.layerX === 'undefined') {\n          touch.layerX = touch.offsetX = touch.clientX;\n        }\n        if (typeof touch.layerY === 'undefined') {\n          touch.layerY = touch.offsetY = touch.clientY;\n        }\n        // mark the touch as normalized, just so that we know we did it\n        touch.isNormalized = true;\n        normalizedEvents.push(touch);\n      }\n    }\n    // apparently PointerEvent subclasses MouseEvent, so yay\n    else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n        var tempEvent = event;\n        if (typeof tempEvent.isPrimary === 'undefined') {\n          tempEvent.isPrimary = true;\n        }\n        if (typeof tempEvent.width === 'undefined') {\n          tempEvent.width = 1;\n        }\n        if (typeof tempEvent.height === 'undefined') {\n          tempEvent.height = 1;\n        }\n        if (typeof tempEvent.tiltX === 'undefined') {\n          tempEvent.tiltX = 0;\n        }\n        if (typeof tempEvent.tiltY === 'undefined') {\n          tempEvent.tiltY = 0;\n        }\n        if (typeof tempEvent.pointerType === 'undefined') {\n          tempEvent.pointerType = 'mouse';\n        }\n        if (typeof tempEvent.pointerId === 'undefined') {\n          tempEvent.pointerId = MOUSE_POINTER_ID;\n        }\n        if (typeof tempEvent.pressure === 'undefined') {\n          tempEvent.pressure = 0.5;\n        }\n        if (typeof tempEvent.twist === 'undefined') {\n          tempEvent.twist = 0;\n        }\n        if (typeof tempEvent.tangentialPressure === 'undefined') {\n          tempEvent.tangentialPressure = 0;\n        }\n        // mark the mouse event as normalized, just so that we know we did it\n        tempEvent.isNormalized = true;\n        normalizedEvents.push(tempEvent);\n      } else {\n        normalizedEvents.push(event);\n      }\n    return normalizedEvents;\n  };\n  /** Destroys the interaction manager. */\n  InteractionManager.prototype.destroy = function () {\n    this.removeEvents();\n    this.removeTickerListener();\n    this.removeAllListeners();\n    this.renderer = null;\n    this.mouse = null;\n    this.eventData = null;\n    this.interactionDOMElement = null;\n    this.onPointerDown = null;\n    this.processPointerDown = null;\n    this.onPointerUp = null;\n    this.processPointerUp = null;\n    this.onPointerCancel = null;\n    this.processPointerCancel = null;\n    this.onPointerMove = null;\n    this.processPointerMove = null;\n    this.onPointerOut = null;\n    this.processPointerOverOut = null;\n    this.onPointerOver = null;\n    this.search = null;\n  };\n  return InteractionManager;\n}(_utils.EventEmitter);\n\nexports.InteractionData = InteractionData;\nexports.InteractionEvent = InteractionEvent;\nexports.InteractionManager = InteractionManager;\nexports.InteractionTrackingData = InteractionTrackingData;\nexports.interactiveTarget = interactiveTarget;\n//# sourceMappingURL=interaction.js.map"},"hash":"2987543095f7894d43df9fe8cfee5448"}