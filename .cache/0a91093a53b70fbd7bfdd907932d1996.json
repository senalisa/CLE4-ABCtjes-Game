{"dependencies":[{"name":"@pixi/display","loc":{"line":8,"column":30}},{"name":"@pixi/utils","loc":{"line":9,"column":38}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessibleTarget = exports.AccessibilityManager = undefined;\n\nvar _display = require(\"@pixi/display\");\n\nvar _utils = require(\"@pixi/utils\");\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\n/*!\n * @pixi/accessibility - v6.3.2\n * Compiled Wed, 04 May 2022 17:49:13 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n};\n\n// add some extra variables to the container..\n_display.DisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nvar AccessibilityManager = /** @class */function () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /** Setting this to true will visually show the divs. */\n    this.debug = false;\n    /** Internal variable, see isActive getter. */\n    this._isActive = false;\n    /** Internal variable, see isMobileAccessibility getter. */\n    this._isMobileAccessibility = false;\n    /** A simple pool for storing divs. */\n    this.pool = [];\n    /** This is a tick used to check if an object is no longer being rendered. */\n    this.renderId = 0;\n    /** The array of currently active accessible items. */\n    this.children = [];\n    /** Count to throttle div updates on android devices. */\n    this.androidUpdateCount = 0;\n    /**  The frequency to update the div elements. */\n    this.androidUpdateFrequency = 500; // 2fps\n    this._hookDiv = null;\n    if (_utils.isMobile.tablet || _utils.isMobile.phone) {\n      this.createTouchHook();\n    }\n    // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n    this._onMouseMove = this._onMouseMove.bind(this);\n    // let listen for tab.. once pressed we can fire up and show the accessibility layer\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n  }\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function () {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessibility for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n      _this.activate();\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.activate = function () {\n    var _a;\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown, false);\n    this.renderer.on('postrender', this.update, this);\n    (_a = this.renderer.view.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.div);\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.deactivate = function () {\n    var _a;\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n    this.renderer.off('postrender', this.update);\n    (_a = this.div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.div);\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n      displayObject.renderId = this.renderId;\n    }\n    var children = displayObject.children;\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        this.updateAccessibleObjects(children[i]);\n      }\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n    if (_utils.isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n    if (!this.renderer.renderingToScreen) {\n      return;\n    }\n    // update children...\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    }\n    var _a = this.renderer.view.getBoundingClientRect(),\n        left = _a.left,\n        top = _a.top,\n        width = _a.width,\n        height = _a.height;\n    var _b = this.renderer,\n        viewWidth = _b.width,\n        viewHeight = _b.height,\n        resolution = _b.resolution;\n    var sx = width / viewWidth * resolution;\n    var sy = height / viewHeight * resolution;\n    var div = this.div;\n    div.style.left = left + \"px\";\n    div.style.top = top + \"px\";\n    div.style.width = viewWidth + \"px\";\n    div.style.height = viewHeight + \"px\";\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        (0, _utils.removeItems)(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\";\n          // update button titles and hints if they exist and they've changed\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        }\n        // the title or index may have changed, if so lets update it!\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    }\n    // increment the render id..\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   *\n   * @param {HTMLElement} div\n   */\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   *\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    var _a = this.renderer,\n        viewWidth = _a.width,\n        viewHeight = _a.height;\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none';\n      // ARIA attributes ensure that button title and hint updates are announced properly\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    }\n    // set pointer events\n    div.style.pointerEvents = displayObject.accessiblePointerEvents;\n    // set the type, this defaults to button!\n    div.type = displayObject.accessibleType;\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n  AccessibilityManager.prototype._onClick = function (e) {\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'click', eventData);\n    interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n    interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n  return AccessibilityManager;\n}();\n\nexports.AccessibilityManager = AccessibilityManager;\nexports.accessibleTarget = accessibleTarget;\n//# sourceMappingURL=accessibility.js.map"},"hash":"cd1554aad01261ad5114476c6f13775c"}