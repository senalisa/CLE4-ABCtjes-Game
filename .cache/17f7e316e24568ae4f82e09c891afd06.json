{"dependencies":[{"name":"@pixi/mesh","loc":{"line":8,"column":49}},{"name":"@pixi/constants","loc":{"line":9,"column":27}},{"name":"@pixi/core","loc":{"line":10,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleRope = exports.SimplePlane = exports.SimpleMesh = exports.RopeGeometry = exports.PlaneGeometry = exports.NineSlicePlane = undefined;\n\nvar _mesh = require(\"@pixi/mesh\");\n\nvar _constants = require(\"@pixi/constants\");\n\nvar _core = require(\"@pixi/core\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n}; /*!\n    * @pixi/mesh-extras - v6.3.2\n    * Compiled Wed, 04 May 2022 17:49:13 UTC\n    *\n    * @pixi/mesh-extras is licensed under the MIT License.\n    * http://www.opensource.org/licenses/mit-license\n    */\n\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * @memberof PIXI\n */\nvar PlaneGeometry = /** @class */function (_super) {\n  __extends(PlaneGeometry, _super);\n  /**\n   * @param width - The width of the plane.\n   * @param height - The height of the plane.\n   * @param segWidth - Number of horizontal segments.\n   * @param segHeight - Number of vertical segments.\n   */\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) {\n      width = 100;\n    }\n    if (height === void 0) {\n      height = 100;\n    }\n    if (segWidth === void 0) {\n      segWidth = 10;\n    }\n    if (segHeight === void 0) {\n      segHeight = 10;\n    }\n    var _this = _super.call(this) || this;\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n    _this.build();\n    return _this;\n  }\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n  PlaneGeometry.prototype.build = function () {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n    var totalSub = segmentsX * segmentsY;\n    for (var i = 0; i < totalSub; i++) {\n      var xpos = i % segmentsX;\n      var ypos = i / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices);\n    // ensure that the changes are uploaded\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n  return PlaneGeometry;\n}(_mesh.MeshGeometry);\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @memberof PIXI\n */\nvar RopeGeometry = /** @class */function (_super) {\n  __extends(RopeGeometry, _super);\n  /**\n   * @param width - The width (i.e., thickness) of the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param textureScale - By default the rope texture will be stretched to match\n   *     rope length. If textureScale is positive this value will be treated as a scaling\n   *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n   *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n   *     then set textureScale=1 to keep the original texture pixel size.\n   *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n   *     i.e. set textureScale=0.5 to scale it down twice.\n   */\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) {\n      width = 200;\n    }\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;\n    _this.points = points;\n    _this._width = width;\n    _this.textureScale = textureScale;\n    _this.build();\n    return _this;\n  }\n  Object.defineProperty(RopeGeometry.prototype, \"width\", {\n    /**\n     * The width (i.e., thickness) of the rope.\n     *\n     * @readOnly\n     */\n    get: function () {\n      return this._width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Refreshes Rope indices and uvs */\n  RopeGeometry.prototype.build = function () {\n    var points = this.points;\n    if (!points) {\n      return;\n    }\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex();\n    // if too little points, or texture hasn't got UVs set yet just move on.\n    if (points.length < 1) {\n      return;\n    }\n    // if the number of points has changed we will need to recreate the arraybuffers\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this._width * this.textureScale;\n    var total = points.length; // - 1;\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    var indexCount = 0;\n    for (var i = 0; i < total - 1; i++) {\n      var index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    // ensure that the changes are uploaded\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n  RopeGeometry.prototype.updateVertices = function () {\n    var points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  };\n  RopeGeometry.prototype.update = function () {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n  return RopeGeometry;\n}(_mesh.MeshGeometry);\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nvar SimpleRope = /** @class */function (_super) {\n  __extends(SimpleRope, _super);\n  /**\n   * @param texture - The texture to use on the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} textureScale - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be stretched instead.\n   */\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n    var _this = this;\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new _mesh.MeshMaterial(texture);\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = _constants.WRAP_MODES.REPEAT;\n    }\n    _this = _super.call(this, ropeGeometry, meshMaterial) || this;\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n    _this.autoUpdate = true;\n    return _this;\n  }\n  SimpleRope.prototype._render = function (renderer) {\n    var geometry = this.geometry;\n    if (this.autoUpdate || geometry._width !== this.shader.texture.height) {\n      geometry._width = this.shader.texture.height;\n      geometry.update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleRope;\n}(_mesh.Mesh);\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nvar SimplePlane = /** @class */function (_super) {\n  __extends(SimplePlane, _super);\n  /**\n   * @param texture - The texture to use on the SimplePlane.\n   * @param verticesX - The number of vertices in the x-axis\n   * @param verticesY - The number of vertices in the y-axis\n   */\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this = this;\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new _mesh.MeshMaterial(_core.Texture.WHITE);\n    _this = _super.call(this, planeGeometry, meshMaterial) || this;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    _this.autoResize = true;\n    return _this;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  SimplePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    var geometry = this.geometry;\n    var _a = this.shader.texture,\n        width = _a.width,\n        height = _a.height;\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = this.shader.texture.width;\n      geometry.height = this.shader.texture.height;\n      geometry.build();\n    }\n  };\n  Object.defineProperty(SimplePlane.prototype, \"texture\", {\n    get: function () {\n      return this.shader.texture;\n    },\n    set: function (value) {\n      // Track texture same way sprite does.\n      // For generated meshes like NineSlicePlane it can change the geometry.\n      // Unfortunately, this method might not work if you directly change texture in material.\n      if (this.shader.texture === value) {\n        return;\n      }\n      this.shader.texture = value;\n      this._textureID = -1;\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once('update', this.textureUpdated, this);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimplePlane.prototype._render = function (renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  SimplePlane.prototype.destroy = function (options) {\n    this.shader.texture.off('update', this.textureUpdated, this);\n    _super.prototype.destroy.call(this, options);\n  };\n  return SimplePlane;\n}(_mesh.Mesh);\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @memberof PIXI\n */\nvar SimpleMesh = /** @class */function (_super) {\n  __extends(SimpleMesh, _super);\n  /**\n   * @param texture - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) {\n      texture = _core.Texture.EMPTY;\n    }\n    var _this = this;\n    var geometry = new _mesh.MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new _mesh.MeshMaterial(texture);\n    _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;\n    _this.autoUpdate = true;\n    return _this;\n  }\n  Object.defineProperty(SimpleMesh.prototype, \"vertices\", {\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SimpleMesh.prototype._render = function (renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  return SimpleMesh;\n}(_mesh.Mesh);\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @memberof PIXI\n */\nvar NineSlicePlane = /** @class */function (_super) {\n  __extends(NineSlicePlane, _super);\n  /**\n   * @param texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    if (leftWidth === void 0) {\n      leftWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (topHeight === void 0) {\n      topHeight = DEFAULT_BORDER_SIZE;\n    }\n    if (rightWidth === void 0) {\n      rightWidth = DEFAULT_BORDER_SIZE;\n    }\n    if (bottomHeight === void 0) {\n      bottomHeight = DEFAULT_BORDER_SIZE;\n    }\n    var _this = _super.call(this, _core.Texture.WHITE, 4, 4) || this;\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    _this._width = _this._origWidth;\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    _this._height = _this._origHeight;\n    _this._leftWidth = leftWidth;\n    _this._rightWidth = rightWidth;\n    _this._topHeight = topHeight;\n    _this._bottomHeight = bottomHeight;\n    // lets call the setter to ensure all necessary updates are performed\n    _this.texture = texture;\n    return _this;\n  }\n  NineSlicePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    this._refresh();\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"vertices\", {\n    get: function () {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function (value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Updates the horizontal vertices. */\n  NineSlicePlane.prototype.updateHorizontalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /** Updates the vertical vertices. */\n  NineSlicePlane.prototype.updateVerticalVertices = function () {\n    var vertices = this.vertices;\n    var scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return Smaller number of vertical and horizontal scale.\n   */\n  NineSlicePlane.prototype._getMinScale = function () {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n  Object.defineProperty(NineSlicePlane.prototype, \"width\", {\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"height\", {\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"leftWidth\", {\n    /** The width of the left column. */\n    get: function () {\n      return this._leftWidth;\n    },\n    set: function (value) {\n      this._leftWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"rightWidth\", {\n    /** The width of the right column. */\n    get: function () {\n      return this._rightWidth;\n    },\n    set: function (value) {\n      this._rightWidth = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"topHeight\", {\n    /** The height of the top row. */\n    get: function () {\n      return this._topHeight;\n    },\n    set: function (value) {\n      this._topHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"bottomHeight\", {\n    /** The height of the bottom row. */\n    get: function () {\n      return this._bottomHeight;\n    },\n    set: function (value) {\n      this._bottomHeight = value;\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Refreshes NineSlicePlane coords. All of them. */\n  NineSlicePlane.prototype._refresh = function () {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    var _uvw = 1.0 / this._origWidth;\n    var _uvh = 1.0 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n  return NineSlicePlane;\n}(SimplePlane);\n\nexports.NineSlicePlane = NineSlicePlane;\nexports.PlaneGeometry = PlaneGeometry;\nexports.RopeGeometry = RopeGeometry;\nexports.SimpleMesh = SimpleMesh;\nexports.SimplePlane = SimplePlane;\nexports.SimpleRope = SimpleRope;\n//# sourceMappingURL=mesh-extras.js.map"},"hash":"15d3fc157e59e71a4ce036724b9444db"}