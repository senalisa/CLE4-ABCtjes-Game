{"dependencies":[{"name":"@pixi/math","loc":{"line":8,"column":50}},{"name":"@pixi/settings","loc":{"line":9,"column":25}},{"name":"@pixi/mesh","loc":{"line":10,"column":49}},{"name":"@pixi/utils","loc":{"line":11,"column":69}},{"name":"@pixi/core","loc":{"line":12,"column":46}},{"name":"@pixi/text","loc":{"line":13,"column":54}},{"name":"@pixi/constants","loc":{"line":14,"column":41}},{"name":"@pixi/display","loc":{"line":15,"column":26}},{"name":"@pixi/loaders","loc":{"line":16,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitmapText = exports.BitmapFontLoader = exports.BitmapFontData = exports.BitmapFont = undefined;\n\nvar _math = require(\"@pixi/math\");\n\nvar _settings = require(\"@pixi/settings\");\n\nvar _mesh = require(\"@pixi/mesh\");\n\nvar _utils = require(\"@pixi/utils\");\n\nvar _core = require(\"@pixi/core\");\n\nvar _text = require(\"@pixi/text\");\n\nvar _constants = require(\"@pixi/constants\");\n\nvar _display = require(\"@pixi/display\");\n\nvar _loaders = require(\"@pixi/loaders\");\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n}; /*!\n    * @pixi/text-bitmap - v6.3.2\n    * Compiled Wed, 04 May 2022 17:49:13 UTC\n    *\n    * @pixi/text-bitmap is licensed under the MIT License.\n    * http://www.opensource.org/licenses/mit-license\n    */\n\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/* eslint-disable max-len */\n/**\n * Normalized parsed data from .fnt files.\n *\n * @memberof PIXI\n */\nvar BitmapFontData = /** @class */function () {\n  function BitmapFontData() {\n    this.info = [];\n    this.common = [];\n    this.page = [];\n    this.char = [];\n    this.kerning = [];\n    this.distanceField = [];\n  }\n  return BitmapFontData;\n}();\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @private\n */\nvar TextFormat = /** @class */function () {\n  function TextFormat() {}\n  /**\n   * Check if resource refers to txt font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n  TextFormat.test = function (data) {\n    return typeof data === 'string' && data.indexOf('info face=') === 0;\n  };\n  /**\n   * Convert text font data to a javascript object.\n   *\n   * @param txt - Raw string data to be converted\n   * @return - Parsed font data\n   */\n  TextFormat.parse = function (txt) {\n    // Retrieve data item\n    var items = txt.match(/^[a-z]+\\s+.+$/gm);\n    var rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n    for (var i in items) {\n      // Extract item name\n      var name = items[i].match(/^[a-z]+/gm)[0];\n      // Extract item attribute list as string ex.: \"width=10\"\n      var attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n      // Convert attribute list into an object\n      var itemData = {};\n      for (var i_1 in attributeList) {\n        // Split key-value pairs\n        var split = attributeList[i_1].split('=');\n        var key = split[0];\n        // Remove eventual quotes from value\n        var strValue = split[1].replace(/\"/gm, '');\n        // Try to convert value into float\n        var floatValue = parseFloat(strValue);\n        // Use string value case float value is NaN\n        var value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      }\n      // Push current item to the resulting data\n      rawData[name].push(itemData);\n    }\n    var font = new BitmapFontData();\n    rawData.info.forEach(function (info) {\n      return font.info.push({\n        face: info.face,\n        size: parseInt(info.size, 10)\n      });\n    });\n    rawData.common.forEach(function (common) {\n      return font.common.push({\n        lineHeight: parseInt(common.lineHeight, 10)\n      });\n    });\n    rawData.page.forEach(function (page) {\n      return font.page.push({\n        id: parseInt(page.id, 10),\n        file: page.file\n      });\n    });\n    rawData.char.forEach(function (char) {\n      return font.char.push({\n        id: parseInt(char.id, 10),\n        page: parseInt(char.page, 10),\n        x: parseInt(char.x, 10),\n        y: parseInt(char.y, 10),\n        width: parseInt(char.width, 10),\n        height: parseInt(char.height, 10),\n        xoffset: parseInt(char.xoffset, 10),\n        yoffset: parseInt(char.yoffset, 10),\n        xadvance: parseInt(char.xadvance, 10)\n      });\n    });\n    rawData.kerning.forEach(function (kerning) {\n      return font.kerning.push({\n        first: parseInt(kerning.first, 10),\n        second: parseInt(kerning.second, 10),\n        amount: parseInt(kerning.amount, 10)\n      });\n    });\n    rawData.distanceField.forEach(function (df) {\n      return font.distanceField.push({\n        distanceRange: parseInt(df.distanceRange, 10),\n        fieldType: df.fieldType\n      });\n    });\n    return font;\n  };\n  return TextFormat;\n}();\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\nvar XMLFormat = /** @class */function () {\n  function XMLFormat() {}\n  /**\n   * Check if resource refers to xml font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n  XMLFormat.test = function (data) {\n    return data instanceof XMLDocument && data.getElementsByTagName('page').length && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n  };\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   *\n   * @param xml\n   * @return - Data to use for BitmapFont\n   */\n  XMLFormat.parse = function (xml) {\n    var data = new BitmapFontData();\n    var info = xml.getElementsByTagName('info');\n    var common = xml.getElementsByTagName('common');\n    var page = xml.getElementsByTagName('page');\n    var char = xml.getElementsByTagName('char');\n    var kerning = xml.getElementsByTagName('kerning');\n    var distanceField = xml.getElementsByTagName('distanceField');\n    for (var i = 0; i < info.length; i++) {\n      data.info.push({\n        face: info[i].getAttribute('face'),\n        size: parseInt(info[i].getAttribute('size'), 10)\n      });\n    }\n    for (var i = 0; i < common.length; i++) {\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10)\n      });\n    }\n    for (var i = 0; i < page.length; i++) {\n      data.page.push({\n        id: parseInt(page[i].getAttribute('id'), 10) || 0,\n        file: page[i].getAttribute('file')\n      });\n    }\n    for (var i = 0; i < char.length; i++) {\n      var letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute('id'), 10),\n        page: parseInt(letter.getAttribute('page'), 10) || 0,\n        x: parseInt(letter.getAttribute('x'), 10),\n        y: parseInt(letter.getAttribute('y'), 10),\n        width: parseInt(letter.getAttribute('width'), 10),\n        height: parseInt(letter.getAttribute('height'), 10),\n        xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n        yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n        xadvance: parseInt(letter.getAttribute('xadvance'), 10)\n      });\n    }\n    for (var i = 0; i < kerning.length; i++) {\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute('first'), 10),\n        second: parseInt(kerning[i].getAttribute('second'), 10),\n        amount: parseInt(kerning[i].getAttribute('amount'), 10)\n      });\n    }\n    for (var i = 0; i < distanceField.length; i++) {\n      data.distanceField.push({\n        fieldType: distanceField[i].getAttribute('fieldType'),\n        distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10)\n      });\n    }\n    return data;\n  };\n  return XMLFormat;\n}();\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\nvar XMLStringFormat = /** @class */function () {\n  function XMLStringFormat() {}\n  /**\n   * Check if resource refers to text xml font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n  XMLStringFormat.test = function (data) {\n    if (typeof data === 'string' && data.indexOf('<font>') > -1) {\n      var xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n      return XMLFormat.test(xml);\n    }\n    return false;\n  };\n  /**\n   * Convert the text XML into BitmapFontData that we can use.\n   *\n   * @param xmlTxt\n   * @return - Data to use for BitmapFont\n   */\n  XMLStringFormat.parse = function (xmlTxt) {\n    var xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n    return XMLFormat.parse(xml);\n  };\n  return XMLStringFormat;\n}();\n\n// Registered formats, maybe make this extensible in the future?\nvar formats = [TextFormat, XMLFormat, XMLStringFormat];\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nfunction autoDetectFormat(data) {\n  for (var i = 0; i < formats.length; i++) {\n    if (formats[i].test(data)) {\n      return formats[i];\n    }\n  }\n  return null;\n}\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n  //       the setter converts to string. See this thread for more details:\n  //       https://github.com/microsoft/TypeScript/issues/2521\n  var fillStyle = style.fill;\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  }\n  // the gradient will be evenly spaced out according to how large the array is.\n  // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n  var gradient;\n  // a dropshadow will enlarge the canvas and result in the gradient being\n  // generated with the incorrect dimensions\n  var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n  // should also take padding into account, padding can offset the gradient\n  var padding = style.padding || 0;\n  var width = canvas.width / resolution - dropShadowCorrection - padding * 2;\n  var height = canvas.height / resolution - dropShadowCorrection - padding * 2;\n  // make a copy of the style settings, so we can manipulate them later\n  var fill = fillStyle.slice();\n  var fillGradientStops = style.fillGradientStops.slice();\n  // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n  if (!fillGradientStops.length) {\n    var lengthPlus1 = fill.length + 1;\n    for (var i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  }\n  // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n  // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n  if (style.fillGradientType === _text.TEXT_GRADIENT.LINEAR_VERTICAL) {\n    // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n    // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n    // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n    // There's potential for floating point precision issues at the seams between gradient repeats.\n    // The loop below generates the stops in order, so track the last generated one to prevent\n    // floating point precision from making us go the teeniest bit backwards, resulting in\n    // the first and last colors getting swapped.\n    var lastIterationStop = 0;\n    // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n    var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n    // textHeight, but as a 0-1 size in global gradient stop space\n    var gradStopLineHeight = textHeight / height;\n    for (var i = 0; i < lines.length; i++) {\n      var thisLineTop = metrics.lineHeight * i;\n      for (var j = 0; j < fill.length; j++) {\n        // 0-1 stop point for the current line, multiplied to global space afterwards\n        var lineStop = 0;\n        if (typeof fillGradientStops[j] === 'number') {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n        var globalStop = thisLineTop / height + lineStop * gradStopLineHeight;\n        // Prevent color stop generation going backwards from floating point imprecision\n        var clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    // start the gradient at the center left of the canvas, and end at the center right of the canvas\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n    // can just evenly space out the gradients in this case, as multiple lines makes no difference\n    // to an even left to right gradient\n    var totalIterations = fill.length + 1;\n    var currentIteration = 1;\n    for (var i = 0; i < fill.length; i++) {\n      var stop = void 0;\n      if (typeof fillGradientStops[i] === 'number') {\n        stop = fillGradientStops[i];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n      gradient.addColorStop(stop, fill[i]);\n      currentIteration++;\n    }\n  }\n  return gradient;\n}\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  var char = metrics.text;\n  var fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  var tx = style.strokeThickness / 2;\n  var ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  // set canvas text styles\n  context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  if (style.dropShadow) {\n    var dropShadowColor = style.dropShadowColor;\n    var rgb = (0, _utils.hex2rgb)(typeof dropShadowColor === 'number' ? dropShadowColor : (0, _utils.string2hex)(dropShadowColor));\n    var dropShadowBlur = style.dropShadowBlur * resolution;\n    var dropShadowDistance = style.dropShadowDistance * resolution;\n    context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n    context.shadowBlur = dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n  } else {\n    context.shadowColor = 'black';\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n  context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n\n/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @private\n */\nfunction splitTextToCharacters(text) {\n  return Array.from ? Array.from(text) : text.split('');\n}\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nfunction resolveCharacters(chars) {\n  // Split the chars string into individual characters\n  if (typeof chars === 'string') {\n    chars = [chars];\n  }\n  // Handle an array of characters+ranges\n  var result = [];\n  for (var i = 0, j = chars.length; i < j; i++) {\n    var item = chars[i];\n    // Handle range delimited by start/end chars\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \" + item.length + \".\");\n      }\n      var startCode = item[0].charCodeAt(0);\n      var endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error('[BitmapFont]: Invalid character range.');\n      }\n      for (var i_1 = startCode, j_1 = endCode; i_1 <= j_1; i_1++) {\n        result.push(String.fromCharCode(i_1));\n      }\n    }\n    // Handle a character set string\n    else {\n        result.push.apply(result, splitTextToCharacters(item));\n      }\n  }\n  if (result.length === 0) {\n    throw new Error('[BitmapFont]: Empty set when resolving characters.');\n  }\n  return result;\n}\n\n/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @private\n */\nfunction extractCharCode(str) {\n  return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @memberof PIXI\n */\nvar BitmapFont = /** @class */function () {\n  /**\n   * @param data\n   * @param textures\n   * @param ownsTextures - Setting to `true` will destroy page textures\n   *        when the font is uninstalled.\n   */\n  function BitmapFont(data, textures, ownsTextures) {\n    var _a, _b;\n    var info = data.info[0];\n    var common = data.common[0];\n    var page = data.page[0];\n    var distanceField = data.distanceField[0];\n    var res = (0, _utils.getResolutionOfUrl)(page.file);\n    var pageTextures = {};\n    this._ownsTextures = ownsTextures;\n    this.font = info.face;\n    this.size = info.size;\n    this.lineHeight = common.lineHeight / res;\n    this.chars = {};\n    this.pageTextures = pageTextures;\n    // Convert the input Texture, Textures or object\n    // into a page Texture lookup by \"id\"\n    for (var i = 0; i < data.page.length; i++) {\n      var _c = data.page[i],\n          id = _c.id,\n          file = _c.file;\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n      // only MSDF and SDF fonts need no-premultiplied-alpha\n      if ((distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) && distanceField.fieldType !== 'none') {\n        pageTextures[id].baseTexture.alphaMode = _constants.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n      }\n    }\n    // parse letters\n    for (var i = 0; i < data.char.length; i++) {\n      var _d = data.char[i],\n          id = _d.id,\n          page_1 = _d.page;\n      var _e = data.char[i],\n          x = _e.x,\n          y = _e.y,\n          width = _e.width,\n          height = _e.height,\n          xoffset = _e.xoffset,\n          yoffset = _e.yoffset,\n          xadvance = _e.xadvance;\n      x /= res;\n      y /= res;\n      width /= res;\n      height /= res;\n      xoffset /= res;\n      yoffset /= res;\n      xadvance /= res;\n      var rect = new _math.Rectangle(x + pageTextures[page_1].frame.x / res, y + pageTextures[page_1].frame.y / res, width, height);\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new _core.Texture(pageTextures[page_1].baseTexture, rect),\n        page: page_1\n      };\n    }\n    // parse kernings\n    for (var i = 0; i < data.kerning.length; i++) {\n      var _f = data.kerning[i],\n          first = _f.first,\n          second = _f.second,\n          amount = _f.amount;\n      first /= res;\n      second /= res;\n      amount /= res;\n      if (this.chars[second]) {\n        this.chars[second].kerning[first] = amount;\n      }\n    }\n    // Store distance field information\n    this.distanceFieldRange = distanceField === null || distanceField === void 0 ? void 0 : distanceField.distanceRange;\n    this.distanceFieldType = (_b = (_a = distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : 'none';\n  }\n  /** Remove references to created glyph textures. */\n  BitmapFont.prototype.destroy = function () {\n    for (var id in this.chars) {\n      this.chars[id].texture.destroy();\n      this.chars[id].texture = null;\n    }\n    for (var id in this.pageTextures) {\n      if (this._ownsTextures) {\n        this.pageTextures[id].destroy(true);\n      }\n      this.pageTextures[id] = null;\n    }\n    // Set readonly null.\n    this.chars = null;\n    this.pageTextures = null;\n  };\n  /**\n   * Register a new bitmap font.\n   *\n   * @param data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param textures - List of textures for each page.\n   * @param ownsTextures - Set to `true` to destroy page textures\n   *        when the font is uninstalled. By default fonts created with\n   *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n   * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n  BitmapFont.install = function (data, textures, ownsTextures) {\n    var fontData;\n    if (data instanceof BitmapFontData) {\n      fontData = data;\n    } else {\n      var format = autoDetectFormat(data);\n      if (!format) {\n        throw new Error('Unrecognized data format for font.');\n      }\n      fontData = format.parse(data);\n    }\n    // Single texture, convert to list\n    if (textures instanceof _core.Texture) {\n      textures = [textures];\n    }\n    var font = new BitmapFont(fontData, textures, ownsTextures);\n    BitmapFont.available[font.font] = font;\n    return font;\n  };\n  /**\n   * Remove bitmap font by name.\n   *\n   * @param name - Name of the font to uninstall.\n   */\n  BitmapFont.uninstall = function (name) {\n    var font = BitmapFont.available[name];\n    if (!font) {\n      throw new Error(\"No font found named '\" + name + \"'\");\n    }\n    font.destroy();\n    delete BitmapFont.available[name];\n  };\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   *\n   * @param name - The name of the custom font to use with BitmapText.\n   * @param style - Style options to render with BitmapFont.\n   * @param options - Setup options for font or name of the font.\n   * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n   *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n   *      Don't forget to include spaces ' ' in your character set!\n   * @param {number} [options.resolution=1] - Render resolution for glyphs.\n   * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n   * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n   * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n   * @return Font generated by style options.\n   * @example\n   * PIXI.BitmapFont.from(\"TitleFont\", {\n   *     fontFamily: \"Arial\",\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: \"purple\"\n   * });\n   *\n   * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n   */\n  BitmapFont.from = function (name, textStyle, options) {\n    if (!name) {\n      throw new Error('[BitmapFont] Property `name` is required.');\n    }\n    var _a = Object.assign({}, BitmapFont.defaultOptions, options),\n        chars = _a.chars,\n        padding = _a.padding,\n        resolution = _a.resolution,\n        textureWidth = _a.textureWidth,\n        textureHeight = _a.textureHeight;\n    var charsList = resolveCharacters(chars);\n    var style = textStyle instanceof _text.TextStyle ? textStyle : new _text.TextStyle(textStyle);\n    var lineWidth = textureWidth;\n    var fontData = new BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    };\n    fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    var positionX = 0;\n    var positionY = 0;\n    var canvas;\n    var context;\n    var baseTexture;\n    var maxCharHeight = 0;\n    var textures = [];\n    for (var i = 0; i < charsList.length; i++) {\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = textureWidth;\n        canvas.height = textureHeight;\n        context = canvas.getContext('2d');\n        baseTexture = new _core.BaseTexture(canvas, { resolution: resolution });\n        textures.push(new _core.Texture(baseTexture));\n        fontData.page.push({\n          id: textures.length - 1,\n          file: ''\n        });\n      }\n      // Measure glyph dimensions\n      var metrics = _text.TextMetrics.measureText(charsList[i], style, false, canvas);\n      var width = metrics.width;\n      var height = Math.ceil(metrics.height);\n      // This is ugly - but italics are given more space so they don't overlap\n      var textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n      // Can't fit char anymore: next canvas please!\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0) {\n          // We don't want user debugging an infinite loop (or do we? :)\n          throw new Error(\"[BitmapFont] textureHeight \" + textureHeight + \"px is \" + (\"too small for \" + style.fontSize + \"px fonts\"));\n        }\n        --i;\n        // Create new atlas once current has filled up\n        canvas = null;\n        context = null;\n        baseTexture = null;\n        positionY = 0;\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n      // Wrap line once full row has been rendered\n      if (textureGlyphWidth * resolution + positionX >= lineWidth) {\n        --i;\n        positionY += maxCharHeight * resolution;\n        positionY = Math.ceil(positionY);\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      // Unique (numeric) ID mapping to this glyph\n      var id = extractCharCode(metrics.text);\n      // Create a texture holding just the glyph\n      fontData.char.push({\n        id: id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height: height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: Math.ceil(width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0))\n      });\n      positionX += (textureGlyphWidth + 2 * padding) * resolution;\n      positionX = Math.ceil(positionX);\n    }\n    // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n    // but we're using measureText which is native and fast.\n    for (var i = 0, len = charsList.length; i < len; i++) {\n      var first = charsList[i];\n      for (var j = 0; j < len; j++) {\n        var second = charsList[j];\n        var c1 = context.measureText(first).width;\n        var c2 = context.measureText(second).width;\n        var total = context.measureText(first + second).width;\n        var amount = total - (c1 + c2);\n        if (amount) {\n          fontData.kerning.push({\n            first: extractCharCode(first),\n            second: extractCharCode(second),\n            amount: amount\n          });\n        }\n      }\n    }\n    var font = new BitmapFont(fontData, textures, true);\n    // Make it easier to replace a font\n    if (BitmapFont.available[name] !== undefined) {\n      BitmapFont.uninstall(name);\n    }\n    BitmapFont.available[name] = font;\n    return font;\n  };\n  /**\n   * This character set includes all the letters in the alphabet (both lower- and upper- case).\n   *\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n   */\n  BitmapFont.ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n  /**\n   * This character set includes all decimal digits (from 0 to 9).\n   *\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n   */\n  BitmapFont.NUMERIC = [['0', '9']];\n  /**\n   * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n   *\n   * @type {string[][]}\n   */\n  BitmapFont.ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n  /**\n   * This character set consists of all the ASCII table.\n   *\n   * @member {string[][]}\n   * @see http://www.asciitable.com/\n   */\n  BitmapFont.ASCII = [[' ', '~']];\n  /**\n   * Collection of default options when using `BitmapFont.from`.\n   *\n   * @property {number} resolution=1\n   * @property {number} textureWidth=512\n   * @property {number} textureHeight=512\n   * @property {number} padding=4\n   * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n   */\n  BitmapFont.defaultOptions = {\n    resolution: 1,\n    textureWidth: 512,\n    textureHeight: 512,\n    padding: 4,\n    chars: BitmapFont.ALPHANUMERIC\n  };\n  /** Collection of available/installed fonts. */\n  BitmapFont.available = {};\n  return BitmapFont;\n}();\n\nvar msdfFrag = \"// Pixi texture info\\r\\nvarying vec2 vTextureCoord;\\r\\nuniform sampler2D uSampler;\\r\\n\\r\\n// Tint\\r\\nuniform vec4 uColor;\\r\\n\\r\\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\\r\\nuniform float uFWidth;\\r\\n\\r\\nvoid main(void) {\\r\\n\\r\\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\\r\\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\\r\\n\\r\\n  // MSDF\\r\\n  float median = texColor.r + texColor.g + texColor.b -\\r\\n                  min(texColor.r, min(texColor.g, texColor.b)) -\\r\\n                  max(texColor.r, max(texColor.g, texColor.b));\\r\\n  // SDF\\r\\n  median = min(median, texColor.a);\\r\\n\\r\\n  float screenPxDistance = uFWidth * (median - 0.5);\\r\\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\\r\\n\\r\\n  // NPM Textures, NPM outputs\\r\\n  gl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\\r\\n\\r\\n}\\r\\n\";\n\nvar msdfVert = \"// Mesh material default fragment\\r\\nattribute vec2 aVertexPosition;\\r\\nattribute vec2 aTextureCoord;\\r\\n\\r\\nuniform mat3 projectionMatrix;\\r\\nuniform mat3 translationMatrix;\\r\\nuniform mat3 uTextureMatrix;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\r\\n\\r\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\r\\n}\\r\\n\";\n\n// If we ever need more than two pools, please make a Dict or something better.\nvar pageMeshDataDefaultPageMeshData = [];\nvar pageMeshDataMSDFPageMeshData = [];\nvar charRenderDataPool = [];\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @memberof PIXI\n */\nvar BitmapText = /** @class */function (_super) {\n  __extends(BitmapText, _super);\n  /**\n   * @param text - A string that you would like the text to display.\n   * @param style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n   *      does not affect single line text.\n   * @param {number} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n  function BitmapText(text, style) {\n    if (style === void 0) {\n      style = {};\n    }\n    var _this = _super.call(this) || this;\n    /**\n     * Private tracker for the current tint.\n     *\n     * @private\n     */\n    _this._tint = 0xFFFFFF;\n    // Apply the defaults\n    var _a = Object.assign({}, BitmapText.styleDefaults, style),\n        align = _a.align,\n        tint = _a.tint,\n        maxWidth = _a.maxWidth,\n        letterSpacing = _a.letterSpacing,\n        fontName = _a.fontName,\n        fontSize = _a.fontSize;\n    if (!BitmapFont.available[fontName]) {\n      throw new Error(\"Missing BitmapFont \\\"\" + fontName + \"\\\"\");\n    }\n    _this._activePagesMeshData = [];\n    _this._textWidth = 0;\n    _this._textHeight = 0;\n    _this._align = align;\n    _this._tint = tint;\n    _this._fontName = fontName;\n    _this._fontSize = fontSize || BitmapFont.available[fontName].size;\n    _this.text = text;\n    _this._maxWidth = maxWidth;\n    _this._maxLineHeight = 0;\n    _this._letterSpacing = letterSpacing;\n    _this._anchor = new _math.ObservablePoint(function () {\n      _this.dirty = true;\n    }, _this, 0, 0);\n    _this._roundPixels = _settings.settings.ROUND_PIXELS;\n    _this.dirty = true;\n    _this._textureCache = {};\n    return _this;\n  }\n  /**\n   * Renders text and updates it when needed. This should only be called\n   * if the BitmapFont is regenerated.\n   */\n  BitmapText.prototype.updateText = function () {\n    var _a;\n    var data = BitmapFont.available[this._fontName];\n    var scale = this._fontSize / data.size;\n    var pos = new _math.Point();\n    var chars = [];\n    var lineWidths = [];\n    var lineSpaces = [];\n    var text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n    var charsInput = splitTextToCharacters(text);\n    var maxWidth = this._maxWidth * data.size / this._fontSize;\n    var pageMeshDataPool = data.distanceFieldType === 'none' ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    var prevCharCode = null;\n    var lastLineWidth = 0;\n    var maxLineWidth = 0;\n    var line = 0;\n    var lastBreakPos = -1;\n    var lastBreakWidth = 0;\n    var spacesRemoved = 0;\n    var maxLineHeight = 0;\n    var spaceCount = 0;\n    for (var i = 0; i < charsInput.length; i++) {\n      var char = charsInput[i];\n      var charCode = extractCharCode(char);\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n        spaceCount++;\n      }\n      if (char === '\\r' || char === '\\n') {\n        lineWidths.push(lastLineWidth);\n        lineSpaces.push(-1);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n        continue;\n      }\n      var charData = data.chars[charCode];\n      if (!charData) {\n        continue;\n      }\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n      var charRenderData = charRenderDataPool.pop() || {\n        texture: _core.Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new _math.Point()\n      };\n      charRenderData.texture = charData.texture;\n      charRenderData.line = line;\n      charRenderData.charCode = charCode;\n      charRenderData.position.x = pos.x + charData.xOffset + this._letterSpacing / 2;\n      charRenderData.position.y = pos.y + charData.yOffset;\n      charRenderData.prevSpaces = spaceCount;\n      chars.push(charRenderData);\n      lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance, charData.texture.orig.width);\n      pos.x += charData.xAdvance + this._letterSpacing;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        (0, _utils.removeItems)(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n      }\n    }\n    var lastChar = charsInput[charsInput.length - 1];\n    if (lastChar !== '\\r' && lastChar !== '\\n') {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n      lineSpaces.push(-1);\n    }\n    var lineAlignOffsets = [];\n    for (var i = 0; i <= line; i++) {\n      var alignOffset = 0;\n      if (this._align === 'right') {\n        alignOffset = maxLineWidth - lineWidths[i];\n      } else if (this._align === 'center') {\n        alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n      } else if (this._align === 'justify') {\n        alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n      }\n      lineAlignOffsets.push(alignOffset);\n    }\n    var lenChars = chars.length;\n    var pagesMeshData = {};\n    var newPagesMeshData = [];\n    var activePagesMeshData = this._activePagesMeshData;\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      pageMeshDataPool.push(activePagesMeshData[i]);\n    }\n    for (var i = 0; i < lenChars; i++) {\n      var texture = chars[i].texture;\n      var baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        var pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          var geometry = new _mesh.MeshGeometry();\n          var material = void 0;\n          var meshBlendMode = void 0;\n          if (data.distanceFieldType === 'none') {\n            material = new _mesh.MeshMaterial(_core.Texture.EMPTY);\n            meshBlendMode = _constants.BLEND_MODES.NORMAL;\n          } else {\n            material = new _mesh.MeshMaterial(_core.Texture.EMPTY, { program: _core.Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n            meshBlendMode = _constants.BLEND_MODES.NORMAL_NPM;\n          }\n          var mesh = new _mesh.Mesh(geometry, material);\n          mesh.blendMode = meshBlendMode;\n          pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        // reset data..\n        pageMeshData.index = 0;\n        pageMeshData.indexCount = 0;\n        pageMeshData.vertexCount = 0;\n        pageMeshData.uvsCount = 0;\n        pageMeshData.total = 0;\n        // TODO need to get page texture here somehow..\n        var _textureCache = this._textureCache;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new _core.Texture(texture.baseTexture);\n        pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n        pageMeshData.mesh.tint = this._tint;\n        newPagesMeshData.push(pageMeshData);\n        pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    // lets find any previously active pageMeshDatas that are no longer required for\n    // the updated text (if any), removed and return them to the pool.\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1) {\n        this.removeChild(activePagesMeshData[i].mesh);\n      }\n    }\n    // next lets add any new meshes, that have not yet been added to this BitmapText\n    // we only add if its not already a child of this BitmapObject\n    for (var i = 0; i < newPagesMeshData.length; i++) {\n      if (newPagesMeshData[i].mesh.parent !== this) {\n        this.addChild(newPagesMeshData[i].mesh);\n      }\n    }\n    // active page mesh datas are set to be the new pages added.\n    this._activePagesMeshData = newPagesMeshData;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      var total = pageMeshData.total;\n      // lets only allocate new buffers if we can fit the new text in the current ones..\n      // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n      if (!(((_a = pageMeshData.indices) === null || _a === void 0 ? void 0 : _a.length) > 6 * total) || pageMeshData.vertices.length < _mesh.Mesh.BATCHABLE_SIZE * 2) {\n        pageMeshData.vertices = new Float32Array(4 * 2 * total);\n        pageMeshData.uvs = new Float32Array(4 * 2 * total);\n        pageMeshData.indices = new Uint16Array(6 * total);\n      } else {\n        var total_1 = pageMeshData.total;\n        var vertices = pageMeshData.vertices;\n        // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n        for (var i_1 = total_1 * 4 * 2; i_1 < vertices.length; i_1++) {\n          vertices[i_1] = 0;\n        }\n      }\n      // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n      // to match the number of letters needed\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (var i = 0; i < lenChars; i++) {\n      var char = chars[i];\n      var offset = char.position.x + lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1);\n      if (this._roundPixels) {\n        offset = Math.round(offset);\n      }\n      var xPos = offset * scale;\n      var yPos = char.position.y * scale;\n      var texture = char.texture;\n      var pageMesh = pagesMeshData[texture.baseTexture.uid];\n      var textureFrame = texture.frame;\n      var textureUvs = texture._uvs;\n      var index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 1] = 1 + index * 4;\n      pageMesh.indices[index * 6 + 2] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 3] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 4] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 5] = 3 + index * 4;\n      pageMesh.vertices[index * 8 + 0] = xPos;\n      pageMesh.vertices[index * 8 + 1] = yPos;\n      pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 3] = yPos;\n      pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale;\n      pageMesh.vertices[index * 8 + 6] = xPos;\n      pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale;\n      pageMesh.uvs[index * 8 + 0] = textureUvs.x0;\n      pageMesh.uvs[index * 8 + 1] = textureUvs.y0;\n      pageMesh.uvs[index * 8 + 2] = textureUvs.x1;\n      pageMesh.uvs[index * 8 + 3] = textureUvs.y1;\n      pageMesh.uvs[index * 8 + 4] = textureUvs.x2;\n      pageMesh.uvs[index * 8 + 5] = textureUvs.y2;\n      pageMesh.uvs[index * 8 + 6] = textureUvs.x3;\n      pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      // apply anchor\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        var vertexCount = 0;\n        var anchorOffsetX = this._textWidth * this.anchor.x;\n        var anchorOffsetY = this._textHeight * this.anchor.y;\n        for (var i_2 = 0; i_2 < pageMeshData.total; i_2++) {\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n        }\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      var vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n      var textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n      var indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices;\n      textureBuffer.data = pageMeshData.uvs;\n      indexBuffer.data = pageMeshData.indices;\n      vertexBuffer.update();\n      textureBuffer.update();\n      indexBuffer.update();\n    }\n    for (var i = 0; i < chars.length; i++) {\n      charRenderDataPool.push(chars[i]);\n    }\n  };\n  BitmapText.prototype.updateTransform = function () {\n    this.validate();\n    this.containerUpdateTransform();\n  };\n  BitmapText.prototype._render = function (renderer) {\n    // Update the uniform\n    var _a = BitmapFont.available[this._fontName],\n        distanceFieldRange = _a.distanceFieldRange,\n        distanceFieldType = _a.distanceFieldType,\n        size = _a.size;\n    if (distanceFieldType !== 'none') {\n      // Inject the shader code with the correct value\n      var _b = this.worldTransform,\n          a = _b.a,\n          b = _b.b,\n          c = _b.c,\n          d = _b.d;\n      var dx = Math.sqrt(a * a + b * b);\n      var dy = Math.sqrt(c * c + d * d);\n      var worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n      var fontScale = this._fontSize / size;\n      for (var _i = 0, _c = this._activePagesMeshData; _i < _c.length; _i++) {\n        var mesh = _c[_i];\n        mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * renderer.resolution;\n      }\n    }\n    _super.prototype._render.call(this, renderer);\n  };\n  /**\n   * Validates text before calling parent's getLocalBounds\n   *\n   * @return - The rectangular bounding area\n   */\n  BitmapText.prototype.getLocalBounds = function () {\n    this.validate();\n    return _super.prototype.getLocalBounds.call(this);\n  };\n  /**\n   * Updates text when needed\n   *\n   * @private\n   */\n  BitmapText.prototype.validate = function () {\n    if (this.dirty) {\n      this.updateText();\n      this.dirty = false;\n    }\n  };\n  Object.defineProperty(BitmapText.prototype, \"tint\", {\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @default 0xffffff\n     */\n    get: function () {\n      return this._tint;\n    },\n    set: function (value) {\n      if (this._tint === value) {\n        return;\n      }\n      this._tint = value;\n      for (var i = 0; i < this._activePagesMeshData.length; i++) {\n        this._activePagesMeshData[i].mesh.tint = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"align\", {\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get: function () {\n      return this._align;\n    },\n    set: function (value) {\n      if (this._align !== value) {\n        this._align = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontName\", {\n    /** The name of the BitmapFont. */\n    get: function () {\n      return this._fontName;\n    },\n    set: function (value) {\n      if (!BitmapFont.available[value]) {\n        throw new Error(\"Missing BitmapFont \\\"\" + value + \"\\\"\");\n      }\n      if (this._fontName !== value) {\n        this._fontName = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontSize\", {\n    /** The size of the font to display. */\n    get: function () {\n      return this._fontSize;\n    },\n    set: function (value) {\n      if (this._fontSize !== value) {\n        this._fontSize = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"anchor\", {\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    get: function () {\n      return this._anchor;\n    },\n    set: function (value) {\n      if (typeof value === 'number') {\n        this._anchor.set(value);\n      } else {\n        this._anchor.copyFrom(value);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"text\", {\n    /** The text of the BitmapText object. */\n    get: function () {\n      return this._text;\n    },\n    set: function (text) {\n      text = String(text === null || text === undefined ? '' : text);\n      if (this._text === text) {\n        return;\n      }\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxWidth\", {\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    get: function () {\n      return this._maxWidth;\n    },\n    set: function (value) {\n      if (this._maxWidth === value) {\n        return;\n      }\n      this._maxWidth = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxLineHeight\", {\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._maxLineHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textWidth\", {\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._textWidth;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"letterSpacing\", {\n    /** Additional space between characters. */\n    get: function () {\n      return this._letterSpacing;\n    },\n    set: function (value) {\n      if (this._letterSpacing !== value) {\n        this._letterSpacing = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"roundPixels\", {\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    get: function () {\n      return this._roundPixels;\n    },\n    set: function (value) {\n      if (value !== this._roundPixels) {\n        this._roundPixels = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textHeight\", {\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    get: function () {\n      this.validate();\n      return this._textHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BitmapText.prototype.destroy = function (options) {\n    var _textureCache = this._textureCache;\n    for (var id in _textureCache) {\n      var texture = _textureCache[id];\n      texture.destroy();\n      delete _textureCache[id];\n    }\n    this._textureCache = null;\n    _super.prototype.destroy.call(this, options);\n  };\n  BitmapText.styleDefaults = {\n    align: 'left',\n    tint: 0xFFFFFF,\n    maxWidth: 0,\n    letterSpacing: 0\n  };\n  return BitmapText;\n}(_display.Container);\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n *\n * @memberof PIXI\n */\nvar BitmapFontLoader = /** @class */function () {\n  function BitmapFontLoader() {}\n  /**\n   * Called when the plugin is installed.\n   *\n   * @see PIXI.Loader.registerPlugin\n   */\n  BitmapFontLoader.add = function () {\n    _loaders.LoaderResource.setExtensionXhrType('fnt', _loaders.LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n  };\n  /**\n   * Called after a resource is loaded.\n   *\n   * @see PIXI.Loader.loaderMiddleware\n   * @param {PIXI.LoaderResource} resource\n   * @param {function} next\n   */\n  BitmapFontLoader.use = function (resource, next) {\n    var format = autoDetectFormat(resource.data);\n    // Resource was not recognised as any of the expected font data format\n    if (!format) {\n      next();\n      return;\n    }\n    var baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n    var data = format.parse(resource.data);\n    var textures = {};\n    // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n    var completed = function (page) {\n      textures[page.metadata.pageFile] = page.texture;\n      if (Object.keys(textures).length === data.page.length) {\n        resource.bitmapFont = BitmapFont.install(data, textures, true);\n        next();\n      }\n    };\n    for (var i = 0; i < data.page.length; ++i) {\n      var pageFile = data.page[i].file;\n      var url = baseUrl + pageFile;\n      var exists = false;\n      // incase the image is loaded outside\n      // using the same loader, resource will be available\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n          exists = true;\n          break;\n        }\n      }\n      // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: _loaders.LoaderResource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({ pageFile: pageFile }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n  /** Get folder path from a resource. */\n  BitmapFontLoader.getBaseUrl = function (loader, resource) {\n    var resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n    if (resource.isDataUrl) {\n      if (resUrl === '.') {\n        resUrl = '';\n      }\n      if (loader.baseUrl && resUrl) {\n        // if baseurl has a trailing slash then add one to resUrl so the replace works below\n        if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/') {\n          resUrl += '/';\n        }\n      }\n    }\n    // remove baseUrl from resUrl\n    resUrl = resUrl.replace(loader.baseUrl, '');\n    // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n    if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/') {\n      resUrl += '/';\n    }\n    return resUrl;\n  };\n  /**\n   * Replacement for NodeJS's path.dirname\n   *\n   * @param {string} url - Path to get directory for\n   */\n  BitmapFontLoader.dirname = function (url) {\n    var dir = url.replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n    .replace(/\\/$/, '') // replace trailing slash\n    .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n    // File request is relative, use current directory\n    if (dir === url) {\n      return '.';\n    }\n    // Started with a slash\n    else if (dir === '') {\n        return '/';\n      }\n    return dir;\n  };\n  return BitmapFontLoader;\n}();\n\nexports.BitmapFont = BitmapFont;\nexports.BitmapFontData = BitmapFontData;\nexports.BitmapFontLoader = BitmapFontLoader;\nexports.BitmapText = BitmapText;\n//# sourceMappingURL=text-bitmap.js.map"},"hash":"81cbf4c2cb76fad7527e53a113e0e02a"}