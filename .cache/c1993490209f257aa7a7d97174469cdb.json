{"dependencies":[{"name":"@pixi/utils","loc":{"line":8,"column":35}},{"name":"@pixi/math","loc":{"line":9,"column":26}},{"name":"@pixi/core","loc":{"line":10,"column":30}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Extract = undefined;\n\nvar _utils = require(\"@pixi/utils\");\n\nvar _math = require(\"@pixi/math\");\n\nvar _core = require(\"@pixi/core\");\n\nvar TEMP_RECT = new _math.Rectangle(); /*!\n                                        * @pixi/extract - v6.3.2\n                                        * Compiled Wed, 04 May 2022 17:49:13 UTC\n                                        *\n                                        * @pixi/extract is licensed under the MIT License.\n                                        * http://www.opensource.org/licenses/mit-license\n                                        */\n\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n *\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n *\n * @memberof PIXI\n */\nvar Extract = /** @class */function () {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  function Extract(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Will return a HTML Image of the target\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return - HTML Image of the target\n   */\n  Extract.prototype.image = function (target, format, quality) {\n    var image = new Image();\n    image.src = this.base64(target, format, quality);\n    return image;\n  };\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   *  `Extract.getCanvas` and then running toDataURL on that.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return - A base64 encoded string of the texture.\n   */\n  Extract.prototype.base64 = function (target, format, quality) {\n    return this.canvas(target).toDataURL(format, quality);\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return - A Canvas element with the texture rendered on.\n   */\n  Extract.prototype.canvas = function (target) {\n    var renderer = this.renderer;\n    var resolution;\n    var frame;\n    var flipY = false;\n    var renderTexture;\n    var generated = false;\n    if (target) {\n      if (target instanceof _core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = renderTexture.frame;\n      flipY = false;\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = this.renderer.resolution;\n      flipY = true;\n      frame = TEMP_RECT;\n      frame.width = this.renderer.width;\n      frame.height = this.renderer.height;\n      renderer.renderTexture.bind(null);\n    }\n    var width = Math.floor(frame.width * resolution + 1e-4);\n    var height = Math.floor(frame.height * resolution + 1e-4);\n    var canvasBuffer = new _utils.CanvasRenderTarget(width, height, 1);\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    // read pixels to the array\n    var gl = renderer.gl;\n    gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n    // add the pixels to the canvas\n    var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n    Extract.arrayPostDivide(webglPixels, canvasData.data);\n    canvasBuffer.context.putImageData(canvasData, 0, 0);\n    // pulling pixels\n    if (flipY) {\n      var target_1 = new _utils.CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n      target_1.context.scale(1, -1);\n      // we can't render to itself because we should be empty before render.\n      target_1.context.drawImage(canvasBuffer.canvas, 0, -height);\n      canvasBuffer.destroy();\n      canvasBuffer = target_1;\n    }\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    // send the canvas back..\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return - One-dimensional array containing the pixel data of the entire texture\n   */\n  Extract.prototype.pixels = function (target) {\n    var renderer = this.renderer;\n    var resolution;\n    var frame;\n    var renderTexture;\n    var generated = false;\n    if (target) {\n      if (target instanceof _core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = renderTexture.frame;\n      // bind the buffer\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = renderer.resolution;\n      frame = TEMP_RECT;\n      frame.width = renderer.width;\n      frame.height = renderer.height;\n      renderer.renderTexture.bind(null);\n    }\n    var width = frame.width * resolution;\n    var height = frame.height * resolution;\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    // read pixels to the array\n    var gl = renderer.gl;\n    gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    Extract.arrayPostDivide(webglPixels, webglPixels);\n    return webglPixels;\n  };\n  /** Destroys the extract. */\n  Extract.prototype.destroy = function () {\n    this.renderer = null;\n  };\n  /**\n   * Takes premultiplied pixel data and produces regular pixel data\n   *\n   * @private\n   * @param pixels - array of pixel data\n   * @param out - output array\n   */\n  Extract.arrayPostDivide = function (pixels, out) {\n    for (var i = 0; i < pixels.length; i += 4) {\n      var alpha = out[i + 3] = pixels[i + 3];\n      if (alpha !== 0) {\n        out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n        out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n        out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n      } else {\n        out[i] = pixels[i];\n        out[i + 1] = pixels[i + 1];\n        out[i + 2] = pixels[i + 2];\n      }\n    }\n  };\n  return Extract;\n}();\n\nexports.Extract = Extract;\n//# sourceMappingURL=extract.js.map"},"hash":"3f953ef2c165ee12c4458ebcaa1ca5bb"}